// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_kernel_conv_kernel_Pipeline_skip_conn_loop1_skip_conn_loop3_skip_conn_loop5_skip_conn_l (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        bn_out_fifo_dout,
        bn_out_fifo_empty_n,
        bn_out_fifo_read,
        skip_out_fifo_din,
        skip_out_fifo_full_n,
        skip_out_fifo_write,
        noy,
        bound213,
        relu_en,
        bound184,
        base_addr_add,
        bound172,
        icmp_ln314,
        nox,
        skip_en,
        act_mem,
        grp_fu_2953_p_din0,
        grp_fu_2953_p_din1,
        grp_fu_2953_p_opcode,
        grp_fu_2953_p_dout0,
        grp_fu_2953_p_ce,
        grp_fu_2957_p_din0,
        grp_fu_2957_p_din1,
        grp_fu_2957_p_opcode,
        grp_fu_2957_p_dout0,
        grp_fu_2957_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [31:0] m_axi_gmem0_WDATA;
output  [3:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [31:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [31:0] bn_out_fifo_dout;
input   bn_out_fifo_empty_n;
output   bn_out_fifo_read;
output  [31:0] skip_out_fifo_din;
input   skip_out_fifo_full_n;
output   skip_out_fifo_write;
input  [31:0] noy;
input  [101:0] bound213;
input  [0:0] relu_en;
input  [69:0] bound184;
input  [31:0] base_addr_add;
input  [37:0] bound172;
input  [0:0] icmp_ln314;
input  [31:0] nox;
input  [0:0] skip_en;
input  [63:0] act_mem;
output  [31:0] grp_fu_2953_p_din0;
output  [31:0] grp_fu_2953_p_din1;
output  [0:0] grp_fu_2953_p_opcode;
input  [31:0] grp_fu_2953_p_dout0;
output   grp_fu_2953_p_ce;
output  [31:0] grp_fu_2957_p_din0;
output  [31:0] grp_fu_2957_p_din1;
output  [4:0] grp_fu_2957_p_opcode;
input  [0:0] grp_fu_2957_p_dout0;
output   grp_fu_2957_p_ce;

reg ap_idle;
reg m_axi_gmem0_ARVALID;
reg m_axi_gmem0_RREADY;
reg bn_out_fifo_read;
reg skip_out_fifo_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln364_reg_1033;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter2_reg;
wire   [0:0] skip_en_read_reg_985;
reg    ap_predicate_op145_readreq_state4;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter9_reg;
reg    ap_predicate_op161_read_state11;
reg    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_state17_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln364_fu_350_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_R;
reg    skip_out_fifo_blk_n;
reg    bn_out_fifo_blk_n;
reg   [31:0] val_2_reg_255;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] relu_en_read_reg_1017;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter3_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter4_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter5_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter6_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter7_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter8_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter10_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter11_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter12_reg;
reg   [0:0] icmp_ln364_reg_1033_pp0_iter13_reg;
wire   [0:0] icmp_ln366_fu_376_p2;
reg   [0:0] icmp_ln366_reg_1037;
wire   [0:0] select_ln364_4_fu_451_p3;
reg   [0:0] select_ln364_4_reg_1042;
wire   [0:0] or_ln366_fu_472_p2;
reg   [0:0] or_ln366_reg_1047;
wire   [0:0] and_ln366_1_fu_504_p2;
reg   [0:0] and_ln366_1_reg_1052;
wire   [2:0] select_ln372_fu_594_p3;
reg   [2:0] select_ln372_reg_1058;
wire  signed [31:0] select_ln372_1_fu_618_p3;
reg  signed [31:0] select_ln372_1_reg_1063;
reg   [63:0] gmem0_addr_reg_1068;
wire   [31:0] tmp_fu_844_p1;
reg   [31:0] tmp_reg_1074;
reg   [31:0] gmem0_addr_read_reg_1080;
wire   [31:0] add_val_fu_848_p1;
wire   [31:0] ap_phi_reg_pp0_iter0_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter1_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter2_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter3_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter4_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter5_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter6_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter7_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter8_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter9_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter10_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter11_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter12_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter13_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter14_val_2_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter15_val_2_reg_255;
wire  signed [63:0] sext_ln379_fu_829_p1;
reg   [2:0] x_fu_134;
wire   [2:0] add_ln374_fu_643_p2;
wire    ap_loop_init;
reg   [2:0] y_fu_138;
wire   [2:0] select_ln372_2_fu_626_p3;
reg   [5:0] indvar_flatten279_fu_142;
wire   [5:0] select_ln372_3_fu_655_p3;
reg   [31:0] x0_fu_146;
wire   [31:0] select_ln368_3_fu_776_p3;
reg   [37:0] indvar_flatten299_fu_150;
wire   [37:0] select_ln368_4_fu_669_p3;
reg   [31:0] y0_fu_154;
wire   [31:0] select_ln366_3_fu_510_p3;
reg   [69:0] indvar_flatten329_fu_158;
wire   [69:0] select_ln366_4_fu_683_p3;
reg  signed [31:0] f_out_fu_162;
wire   [31:0] select_ln364_5_fu_458_p3;
reg   [101:0] indvar_flatten367_fu_166;
wire   [101:0] add_ln364_fu_355_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] mul_i38_fu_329_p2;
wire   [31:0] zext_ln372_fu_334_p1;
wire  signed [31:0] f_out_7_fu_344_p0;
wire  signed [31:0] f_out_7_fu_344_p2;
wire   [31:0] mul_i38_mid1_fu_389_p2;
wire   [31:0] tmp10_fu_338_p2;
wire   [31:0] mul23_i1621_fu_402_p2;
wire   [0:0] icmp_ln374_fu_422_p2;
wire   [0:0] xor_ln364_fu_416_p2;
wire   [0:0] icmp_ln372_fu_434_p2;
wire   [0:0] icmp_ln368_fu_446_p2;
wire  signed [31:0] select_ln364_5_fu_458_p2;
wire   [31:0] select_ln364_fu_381_p3;
wire   [31:0] select_ln364_1_fu_394_p3;
wire   [31:0] y0_3_fu_466_p2;
wire   [31:0] mul23_i1_mid1319_fu_478_p2;
wire   [31:0] select_ln364_3_fu_408_p3;
wire   [0:0] and_ln364_fu_428_p2;
wire   [0:0] xor_ln366_fu_492_p2;
wire   [0:0] and_ln364_1_fu_440_p2;
wire   [0:0] or_ln368_fu_518_p2;
wire   [0:0] or_ln368_3_fu_524_p2;
wire   [31:0] mul23_i1_mid1293_fu_538_p2;
wire   [31:0] select_ln366_2_fu_484_p3;
wire   [0:0] xor_ln368_fu_552_p2;
wire   [0:0] or_ln368_1_fu_558_p2;
wire   [0:0] and_ln366_fu_498_p2;
wire   [0:0] or_ln368_2_fu_564_p2;
wire   [2:0] select_ln368_fu_530_p3;
wire   [0:0] and_ln368_fu_570_p2;
wire   [0:0] or_ln372_fu_582_p2;
wire   [0:0] or_ln372_1_fu_588_p2;
wire   [2:0] y_8_fu_576_p2;
wire   [31:0] zext_ln372_1_fu_602_p1;
wire   [31:0] tmp10_mid1_fu_606_p2;
wire   [31:0] mul23_i1_mid1_fu_612_p2;
wire   [31:0] select_ln368_2_fu_544_p3;
wire   [5:0] add_ln372_1_fu_649_p2;
wire   [37:0] add_ln368_1_fu_663_p2;
wire   [69:0] add_ln366_1_fu_677_p2;
wire   [31:0] add_ln379_2_fu_734_p2;
wire   [31:0] select_ln364_2_fu_739_p3;
wire   [31:0] select_ln366_fu_745_p3;
wire   [31:0] x0_5_fu_758_p2;
wire   [31:0] add_ln379_4_fu_764_p2;
wire   [31:0] select_ln366_1_fu_752_p3;
wire   [31:0] mul_ln372_fu_783_p2;
wire   [31:0] zext_ln378_fu_787_p1;
wire   [31:0] add_ln379_3_fu_790_p2;
wire   [31:0] select_ln368_1_fu_769_p3;
wire   [31:0] add_ln379_fu_796_p2;
wire   [33:0] shl_ln5_fu_802_p3;
wire   [63:0] zext_ln379_fu_810_p1;
wire   [63:0] add_ln379_1_fu_814_p2;
wire   [61:0] trunc_ln8_fu_819_p4;
wire   [31:0] bitcast_ln383_fu_852_p1;
wire   [7:0] tmp_s_fu_856_p4;
wire   [22:0] trunc_ln383_fu_866_p1;
wire   [0:0] icmp_ln383_1_fu_876_p2;
wire   [0:0] icmp_ln383_fu_870_p2;
wire   [0:0] or_ln383_fu_882_p2;
wire   [0:0] and_ln383_fu_888_p2;
wire   [31:0] val_3_fu_894_p3;
wire   [31:0] val_4_fu_902_p3;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_265_ce;
reg    grp_fu_269_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U313(
    .din0(f_out_fu_162),
    .din1(noy),
    .dout(mul_i38_fu_329_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U314(
    .din0(f_out_7_fu_344_p2),
    .din1(noy),
    .dout(mul_i38_mid1_fu_389_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U315(
    .din0(select_ln372_1_reg_1063),
    .din1(nox),
    .dout(mul_ln372_fu_783_p2)
);

conv_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0) & (skip_en_read_reg_985 == 1'd0))) begin
            ap_phi_reg_pp0_iter11_val_2_reg_255 <= tmp_fu_844_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter11_val_2_reg_255 <= ap_phi_reg_pp0_iter10_val_2_reg_255;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln364_reg_1033_pp0_iter13_reg == 1'd0) & (skip_en == 1'd1))) begin
            ap_phi_reg_pp0_iter15_val_2_reg_255 <= grp_fu_2953_p_dout0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_val_2_reg_255 <= ap_phi_reg_pp0_iter14_val_2_reg_255;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            f_out_fu_162 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln364_fu_350_p2 == 1'd0))) begin
            f_out_fu_162 <= select_ln364_5_fu_458_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten279_fu_142 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln364_fu_350_p2 == 1'd0))) begin
            indvar_flatten279_fu_142 <= select_ln372_3_fu_655_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten299_fu_150 <= 38'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln364_fu_350_p2 == 1'd0))) begin
            indvar_flatten299_fu_150 <= select_ln368_4_fu_669_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten329_fu_158 <= 70'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln364_fu_350_p2 == 1'd0))) begin
            indvar_flatten329_fu_158 <= select_ln366_4_fu_683_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten367_fu_166 <= 102'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln364_fu_350_p2 == 1'd0))) begin
            indvar_flatten367_fu_166 <= add_ln364_fu_355_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x0_fu_146 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            x0_fu_146 <= select_ln368_3_fu_776_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_134 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln364_fu_350_p2 == 1'd0))) begin
            x_fu_134 <= add_ln374_fu_643_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            y0_fu_154 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln364_fu_350_p2 == 1'd0))) begin
            y0_fu_154 <= select_ln366_3_fu_510_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_138 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln364_fu_350_p2 == 1'd0))) begin
            y_fu_138 <= select_ln372_2_fu_626_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln364_fu_350_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln366_1_reg_1052 <= and_ln366_1_fu_504_p2;
        icmp_ln366_reg_1037 <= icmp_ln366_fu_376_p2;
        or_ln366_reg_1047 <= or_ln366_fu_472_p2;
        select_ln364_4_reg_1042 <= select_ln364_4_fu_451_p3;
        select_ln372_1_reg_1063 <= select_ln372_1_fu_618_p3;
        select_ln372_reg_1058 <= select_ln372_fu_594_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln364_reg_1033_pp0_iter10_reg <= icmp_ln364_reg_1033_pp0_iter9_reg;
        icmp_ln364_reg_1033_pp0_iter11_reg <= icmp_ln364_reg_1033_pp0_iter10_reg;
        icmp_ln364_reg_1033_pp0_iter12_reg <= icmp_ln364_reg_1033_pp0_iter11_reg;
        icmp_ln364_reg_1033_pp0_iter13_reg <= icmp_ln364_reg_1033_pp0_iter12_reg;
        icmp_ln364_reg_1033_pp0_iter2_reg <= icmp_ln364_reg_1033;
        icmp_ln364_reg_1033_pp0_iter3_reg <= icmp_ln364_reg_1033_pp0_iter2_reg;
        icmp_ln364_reg_1033_pp0_iter4_reg <= icmp_ln364_reg_1033_pp0_iter3_reg;
        icmp_ln364_reg_1033_pp0_iter5_reg <= icmp_ln364_reg_1033_pp0_iter4_reg;
        icmp_ln364_reg_1033_pp0_iter6_reg <= icmp_ln364_reg_1033_pp0_iter5_reg;
        icmp_ln364_reg_1033_pp0_iter7_reg <= icmp_ln364_reg_1033_pp0_iter6_reg;
        icmp_ln364_reg_1033_pp0_iter8_reg <= icmp_ln364_reg_1033_pp0_iter7_reg;
        icmp_ln364_reg_1033_pp0_iter9_reg <= icmp_ln364_reg_1033_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln364_reg_1033 <= icmp_ln364_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter10_val_2_reg_255 <= ap_phi_reg_pp0_iter9_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter12_val_2_reg_255 <= ap_phi_reg_pp0_iter11_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter13_val_2_reg_255 <= ap_phi_reg_pp0_iter12_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter14_val_2_reg_255 <= ap_phi_reg_pp0_iter13_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_val_2_reg_255 <= ap_phi_reg_pp0_iter0_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_val_2_reg_255 <= ap_phi_reg_pp0_iter1_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_val_2_reg_255 <= ap_phi_reg_pp0_iter2_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_val_2_reg_255 <= ap_phi_reg_pp0_iter3_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_val_2_reg_255 <= ap_phi_reg_pp0_iter4_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_val_2_reg_255 <= ap_phi_reg_pp0_iter5_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_val_2_reg_255 <= ap_phi_reg_pp0_iter6_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_val_2_reg_255 <= ap_phi_reg_pp0_iter7_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_val_2_reg_255 <= ap_phi_reg_pp0_iter8_val_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op161_read_state11 == 1'b1))) begin
        gmem0_addr_read_reg_1080 <= m_axi_gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (skip_en == 1'd1) & (icmp_ln364_reg_1033 == 1'd0))) begin
        gmem0_addr_reg_1068 <= sext_ln379_fu_829_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0))) begin
        tmp_reg_1074 <= tmp_fu_844_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        val_2_reg_255 <= ap_phi_reg_pp0_iter15_val_2_reg_255;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln364_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0))) begin
        bn_out_fifo_blk_n = bn_out_fifo_empty_n;
    end else begin
        bn_out_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0))) begin
        bn_out_fifo_read = 1'b1;
    end else begin
        bn_out_fifo_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op145_readreq_state4 == 1'b1))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op161_read_state11 == 1'b1))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_265_ce = 1'b1;
    end else begin
        grp_fu_265_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_269_ce = 1'b1;
    end else begin
        grp_fu_269_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op145_readreq_state4 == 1'b1))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op161_read_state11 == 1'b1))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        skip_out_fifo_blk_n = skip_out_fifo_full_n;
    end else begin
        skip_out_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        skip_out_fifo_write = 1'b1;
    end else begin
        skip_out_fifo_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln364_fu_355_p2 = (indvar_flatten367_fu_166 + 102'd1);

assign add_ln366_1_fu_677_p2 = (indvar_flatten329_fu_158 + 70'd1);

assign add_ln368_1_fu_663_p2 = (indvar_flatten299_fu_150 + 38'd1);

assign add_ln372_1_fu_649_p2 = (indvar_flatten279_fu_142 + 6'd1);

assign add_ln374_fu_643_p2 = (select_ln372_fu_594_p3 + 3'd1);

assign add_ln379_1_fu_814_p2 = (zext_ln379_fu_810_p1 + act_mem);

assign add_ln379_2_fu_734_p2 = (x0_fu_146 + base_addr_add);

assign add_ln379_3_fu_790_p2 = (mul_ln372_fu_783_p2 + zext_ln378_fu_787_p1);

assign add_ln379_4_fu_764_p2 = (x0_5_fu_758_p2 + base_addr_add);

assign add_ln379_fu_796_p2 = (add_ln379_3_fu_790_p2 + select_ln368_1_fu_769_p3);

assign add_val_fu_848_p1 = gmem0_addr_read_reg_1080;

assign and_ln364_1_fu_440_p2 = (xor_ln364_fu_416_p2 & icmp_ln372_fu_434_p2);

assign and_ln364_fu_428_p2 = (xor_ln364_fu_416_p2 & icmp_ln374_fu_422_p2);

assign and_ln366_1_fu_504_p2 = (xor_ln366_fu_492_p2 & and_ln364_1_fu_440_p2);

assign and_ln366_fu_498_p2 = (xor_ln366_fu_492_p2 & and_ln364_fu_428_p2);

assign and_ln368_fu_570_p2 = (or_ln368_2_fu_564_p2 & and_ln366_fu_498_p2);

assign and_ln383_fu_888_p2 = (or_ln383_fu_882_p2 & grp_fu_2957_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((ap_enable_reg_pp0_iter16 == 1'b1) & (skip_out_fifo_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((ap_predicate_op161_read_state11 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0) & (bn_out_fifo_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter16 == 1'b1) & (skip_out_fifo_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((ap_predicate_op161_read_state11 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0) & (bn_out_fifo_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter16 == 1'b1) & (skip_out_fifo_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((ap_predicate_op161_read_state11 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0) & (bn_out_fifo_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter16 == 1'b1) & (skip_out_fifo_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((ap_predicate_op161_read_state11 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0) & (bn_out_fifo_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = (((ap_predicate_op161_read_state11 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0) & (bn_out_fifo_empty_n == 1'b0)));
end

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter16 = (skip_out_fifo_full_n == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((ap_predicate_op145_readreq_state4 == 1'b1) & (m_axi_gmem0_ARREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_val_2_reg_255 = 'bx;

always @ (*) begin
    ap_predicate_op145_readreq_state4 = ((skip_en == 1'd1) & (icmp_ln364_reg_1033_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op161_read_state11 = ((icmp_ln364_reg_1033_pp0_iter9_reg == 1'd0) & (skip_en == 1'd1));
end

assign bitcast_ln383_fu_852_p1 = val_2_reg_255;

assign f_out_7_fu_344_p0 = f_out_fu_162;

assign f_out_7_fu_344_p2 = ($signed(f_out_7_fu_344_p0) + $signed(32'd1));

assign grp_fu_2953_p_ce = grp_fu_265_ce;

assign grp_fu_2953_p_din0 = tmp_reg_1074;

assign grp_fu_2953_p_din1 = add_val_fu_848_p1;

assign grp_fu_2953_p_opcode = 2'd0;

assign grp_fu_2957_p_ce = grp_fu_269_ce;

assign grp_fu_2957_p_din0 = ap_phi_reg_pp0_iter15_val_2_reg_255;

assign grp_fu_2957_p_din1 = 32'd0;

assign grp_fu_2957_p_opcode = 5'd2;

assign icmp_ln364_fu_350_p2 = ((indvar_flatten367_fu_166 == bound213) ? 1'b1 : 1'b0);

assign icmp_ln366_fu_376_p2 = ((indvar_flatten329_fu_158 == bound184) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_446_p2 = ((indvar_flatten299_fu_150 == bound172) ? 1'b1 : 1'b0);

assign icmp_ln372_fu_434_p2 = ((indvar_flatten279_fu_142 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln374_fu_422_p2 = ((x_fu_134 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln383_1_fu_876_p2 = ((trunc_ln383_fu_866_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln383_fu_870_p2 = ((tmp_s_fu_856_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem0_ARADDR = gmem0_addr_reg_1068;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd1;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 32'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 4'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign mul23_i1621_fu_402_p2 = (tmp10_fu_338_p2 + y0_fu_154);

assign mul23_i1_mid1293_fu_538_p2 = (select_ln364_1_fu_394_p3 + select_ln366_3_fu_510_p3);

assign mul23_i1_mid1319_fu_478_p2 = (select_ln364_1_fu_394_p3 + y0_3_fu_466_p2);

assign mul23_i1_mid1_fu_612_p2 = (tmp10_mid1_fu_606_p2 + select_ln366_3_fu_510_p3);

assign or_ln366_fu_472_p2 = (select_ln364_4_fu_451_p3 | icmp_ln366_fu_376_p2);

assign or_ln368_1_fu_558_p2 = (xor_ln368_fu_552_p2 | icmp_ln366_fu_376_p2);

assign or_ln368_2_fu_564_p2 = (select_ln364_4_fu_451_p3 | or_ln368_1_fu_558_p2);

assign or_ln368_3_fu_524_p2 = (or_ln368_fu_518_p2 | icmp_ln366_fu_376_p2);

assign or_ln368_fu_518_p2 = (select_ln364_4_fu_451_p3 | and_ln366_1_fu_504_p2);

assign or_ln372_1_fu_588_p2 = (or_ln372_fu_582_p2 | or_ln366_fu_472_p2);

assign or_ln372_fu_582_p2 = (and_ln368_fu_570_p2 | and_ln366_1_fu_504_p2);

assign or_ln383_fu_882_p2 = (icmp_ln383_fu_870_p2 | icmp_ln383_1_fu_876_p2);

assign relu_en_read_reg_1017 = relu_en;

assign select_ln364_1_fu_394_p3 = ((icmp_ln366_fu_376_p2[0:0] == 1'b1) ? mul_i38_mid1_fu_389_p2 : mul_i38_fu_329_p2);

assign select_ln364_2_fu_739_p3 = ((icmp_ln366_reg_1037[0:0] == 1'b1) ? base_addr_add : add_ln379_2_fu_734_p2);

assign select_ln364_3_fu_408_p3 = ((icmp_ln366_fu_376_p2[0:0] == 1'b1) ? mul_i38_mid1_fu_389_p2 : mul23_i1621_fu_402_p2);

assign select_ln364_4_fu_451_p3 = ((icmp_ln366_fu_376_p2[0:0] == 1'b1) ? icmp_ln314 : icmp_ln368_fu_446_p2);

assign select_ln364_5_fu_458_p2 = f_out_fu_162;

assign select_ln364_5_fu_458_p3 = ((icmp_ln366_fu_376_p2[0:0] == 1'b1) ? f_out_7_fu_344_p2 : select_ln364_5_fu_458_p2);

assign select_ln364_fu_381_p3 = ((icmp_ln366_fu_376_p2[0:0] == 1'b1) ? 32'd0 : y0_fu_154);

assign select_ln366_1_fu_752_p3 = ((select_ln364_4_reg_1042[0:0] == 1'b1) ? base_addr_add : select_ln364_2_fu_739_p3);

assign select_ln366_2_fu_484_p3 = ((select_ln364_4_fu_451_p3[0:0] == 1'b1) ? mul23_i1_mid1319_fu_478_p2 : select_ln364_3_fu_408_p3);

assign select_ln366_3_fu_510_p3 = ((select_ln364_4_fu_451_p3[0:0] == 1'b1) ? y0_3_fu_466_p2 : select_ln364_fu_381_p3);

assign select_ln366_4_fu_683_p3 = ((icmp_ln366_fu_376_p2[0:0] == 1'b1) ? 70'd1 : add_ln366_1_fu_677_p2);

assign select_ln366_fu_745_p3 = ((or_ln366_reg_1047[0:0] == 1'b1) ? 32'd0 : x0_fu_146);

assign select_ln368_1_fu_769_p3 = ((and_ln366_1_reg_1052[0:0] == 1'b1) ? add_ln379_4_fu_764_p2 : select_ln366_1_fu_752_p3);

assign select_ln368_2_fu_544_p3 = ((and_ln366_1_fu_504_p2[0:0] == 1'b1) ? mul23_i1_mid1293_fu_538_p2 : select_ln366_2_fu_484_p3);

assign select_ln368_3_fu_776_p3 = ((and_ln366_1_reg_1052[0:0] == 1'b1) ? x0_5_fu_758_p2 : select_ln366_fu_745_p3);

assign select_ln368_4_fu_669_p3 = ((or_ln366_fu_472_p2[0:0] == 1'b1) ? 38'd1 : add_ln368_1_fu_663_p2);

assign select_ln368_fu_530_p3 = ((or_ln368_3_fu_524_p2[0:0] == 1'b1) ? 3'd0 : y_fu_138);

assign select_ln372_1_fu_618_p3 = ((and_ln368_fu_570_p2[0:0] == 1'b1) ? mul23_i1_mid1_fu_612_p2 : select_ln368_2_fu_544_p3);

assign select_ln372_2_fu_626_p3 = ((and_ln368_fu_570_p2[0:0] == 1'b1) ? y_8_fu_576_p2 : select_ln368_fu_530_p3);

assign select_ln372_3_fu_655_p3 = ((or_ln368_3_fu_524_p2[0:0] == 1'b1) ? 6'd1 : add_ln372_1_fu_649_p2);

assign select_ln372_fu_594_p3 = ((or_ln372_1_fu_588_p2[0:0] == 1'b1) ? 3'd0 : x_fu_134);

assign sext_ln379_fu_829_p1 = $signed(trunc_ln8_fu_819_p4);

assign shl_ln5_fu_802_p3 = {{add_ln379_fu_796_p2}, {2'd0}};

assign skip_en_read_reg_985 = skip_en;

assign skip_out_fifo_din = val_4_fu_902_p3;

assign tmp10_fu_338_p2 = (mul_i38_fu_329_p2 + zext_ln372_fu_334_p1);

assign tmp10_mid1_fu_606_p2 = (select_ln364_1_fu_394_p3 + zext_ln372_1_fu_602_p1);

assign tmp_fu_844_p1 = bn_out_fifo_dout;

assign tmp_s_fu_856_p4 = {{bitcast_ln383_fu_852_p1[30:23]}};

assign trunc_ln383_fu_866_p1 = bitcast_ln383_fu_852_p1[22:0];

assign trunc_ln8_fu_819_p4 = {{add_ln379_1_fu_814_p2[63:2]}};

assign val_3_fu_894_p3 = ((and_ln383_fu_888_p2[0:0] == 1'b1) ? val_2_reg_255 : 32'd0);

assign val_4_fu_902_p3 = ((relu_en[0:0] == 1'b1) ? val_3_fu_894_p3 : val_2_reg_255);

assign x0_5_fu_758_p2 = (select_ln366_fu_745_p3 + 32'd7);

assign xor_ln364_fu_416_p2 = (icmp_ln366_fu_376_p2 ^ 1'd1);

assign xor_ln366_fu_492_p2 = (select_ln364_4_fu_451_p3 ^ 1'd1);

assign xor_ln368_fu_552_p2 = (icmp_ln372_fu_434_p2 ^ 1'd1);

assign y0_3_fu_466_p2 = (select_ln364_fu_381_p3 + 32'd7);

assign y_8_fu_576_p2 = (select_ln368_fu_530_p3 + 3'd1);

assign zext_ln372_1_fu_602_p1 = y_8_fu_576_p2;

assign zext_ln372_fu_334_p1 = y_fu_138;

assign zext_ln378_fu_787_p1 = select_ln372_reg_1058;

assign zext_ln379_fu_810_p1 = shl_ln5_fu_802_p3;

endmodule //conv_kernel_conv_kernel_Pipeline_skip_conn_loop1_skip_conn_loop3_skip_conn_loop5_skip_conn_l
