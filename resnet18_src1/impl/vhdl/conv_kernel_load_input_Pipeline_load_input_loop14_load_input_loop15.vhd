-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_kernel_load_input_Pipeline_load_input_loop14_load_input_loop15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    load_input_fifo5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    load_input_fifo5_full_n : IN STD_LOGIC;
    load_input_fifo5_write : OUT STD_LOGIC;
    y0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad : IN STD_LOGIC_VECTOR (31 downto 0);
    add97 : IN STD_LOGIC_VECTOR (31 downto 0);
    bound158 : IN STD_LOGIC_VECTOR (63 downto 0);
    nkx : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    mul58 : IN STD_LOGIC_VECTOR (31 downto 0);
    x0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    add107 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub_ln92 : IN STD_LOGIC_VECTOR (31 downto 0);
    act_mem : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of conv_kernel_load_input_Pipeline_load_input_loop14_load_input_loop15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln82_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_556_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op85_readreq_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal icmp_ln82_reg_556_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op92_read_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln82_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal load_input_fifo5_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln82_reg_556_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_556_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_556_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_556_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_556_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_556_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_556_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_reg_560_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln93_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_reg_569 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_val_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_0_phi_fu_199_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_p_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln93_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_3_fu_351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten160_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln82_1_fu_271_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp3_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add92_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ult_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp93_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev18_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_mid1_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add92_mid1_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ult19_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln82_1_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln82_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp93_mid1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev20_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_3_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln87_1_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_fu_285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln87_1_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln87_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_2_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln82_2_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln82_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln93_2_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln2_fu_429_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln93_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln93_1_fu_440_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_445_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_295 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component conv_kernel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U49 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln82_fu_332_p0,
        din1 => mul58,
        dout => mul_ln82_fu_332_p2);

    flow_control_loop_pipe_sequential_init_U : component conv_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_p_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_295)) then
                if (((or_ln87_1_fu_391_p2 = ap_const_lv1_1) and (icmp_ln82_fu_266_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_reg_195 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_reg_195 <= ap_phi_reg_pp0_iter1_p_0_reg_195;
                end if;
            end if; 
        end if;
    end process;

    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_90 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln82_fu_266_p2 = ap_const_lv1_0))) then 
                    i_fu_90 <= select_ln82_3_fu_351_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten160_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten160_fu_94 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln82_fu_266_p2 = ap_const_lv1_0))) then 
                    indvar_flatten160_fu_94 <= add_ln82_1_fu_271_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_86 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln82_fu_266_p2 = ap_const_lv1_0))) then 
                    j_fu_86 <= add_ln84_fu_408_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln87_1_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln82_fu_266_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln93_reg_564 <= add_ln93_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln82_reg_556_pp0_iter10_reg <= icmp_ln82_reg_556_pp0_iter9_reg;
                icmp_ln82_reg_556_pp0_iter2_reg <= icmp_ln82_reg_556;
                icmp_ln82_reg_556_pp0_iter3_reg <= icmp_ln82_reg_556_pp0_iter2_reg;
                icmp_ln82_reg_556_pp0_iter4_reg <= icmp_ln82_reg_556_pp0_iter3_reg;
                icmp_ln82_reg_556_pp0_iter5_reg <= icmp_ln82_reg_556_pp0_iter4_reg;
                icmp_ln82_reg_556_pp0_iter6_reg <= icmp_ln82_reg_556_pp0_iter5_reg;
                icmp_ln82_reg_556_pp0_iter7_reg <= icmp_ln82_reg_556_pp0_iter6_reg;
                icmp_ln82_reg_556_pp0_iter8_reg <= icmp_ln82_reg_556_pp0_iter7_reg;
                icmp_ln82_reg_556_pp0_iter9_reg <= icmp_ln82_reg_556_pp0_iter8_reg;
                or_ln87_1_reg_560_pp0_iter10_reg <= or_ln87_1_reg_560_pp0_iter9_reg;
                or_ln87_1_reg_560_pp0_iter2_reg <= or_ln87_1_reg_560;
                or_ln87_1_reg_560_pp0_iter3_reg <= or_ln87_1_reg_560_pp0_iter2_reg;
                or_ln87_1_reg_560_pp0_iter4_reg <= or_ln87_1_reg_560_pp0_iter3_reg;
                or_ln87_1_reg_560_pp0_iter5_reg <= or_ln87_1_reg_560_pp0_iter4_reg;
                or_ln87_1_reg_560_pp0_iter6_reg <= or_ln87_1_reg_560_pp0_iter5_reg;
                or_ln87_1_reg_560_pp0_iter7_reg <= or_ln87_1_reg_560_pp0_iter6_reg;
                or_ln87_1_reg_560_pp0_iter8_reg <= or_ln87_1_reg_560_pp0_iter7_reg;
                or_ln87_1_reg_560_pp0_iter9_reg <= or_ln87_1_reg_560_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln82_reg_556 <= icmp_ln82_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_p_0_reg_195 <= ap_phi_reg_pp0_iter9_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_p_0_reg_195 <= ap_phi_reg_pp0_iter10_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_p_0_reg_195 <= ap_phi_reg_pp0_iter0_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_p_0_reg_195 <= ap_phi_reg_pp0_iter2_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_p_0_reg_195 <= ap_phi_reg_pp0_iter3_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_p_0_reg_195 <= ap_phi_reg_pp0_iter4_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_p_0_reg_195 <= ap_phi_reg_pp0_iter5_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_p_0_reg_195 <= ap_phi_reg_pp0_iter6_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_p_0_reg_195 <= ap_phi_reg_pp0_iter7_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_p_0_reg_195 <= ap_phi_reg_pp0_iter8_p_0_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln87_1_reg_560 = ap_const_lv1_0) and (icmp_ln82_reg_556 = ap_const_lv1_0))) then
                gmem0_addr_reg_569 <= sext_ln93_fu_455_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op92_read_state11 = ap_const_boolean_1))) then
                in_val_reg_575 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln82_fu_266_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln87_1_reg_560 <= or_ln87_1_fu_391_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add92_fu_233_p2 <= std_logic_vector(unsigned(tmp3_fu_228_p2) + unsigned(y_2));
    add92_mid1_fu_298_p2 <= std_logic_vector(unsigned(tmp3_mid1_fu_293_p2) + unsigned(y_2));
    add_ln82_1_fu_271_p2 <= std_logic_vector(unsigned(indvar_flatten160_fu_94) + unsigned(ap_const_lv64_1));
    add_ln84_fu_408_p2 <= std_logic_vector(unsigned(select_ln82_fu_285_p3) + unsigned(ap_const_lv32_1));
    add_ln87_1_fu_359_p2 <= std_logic_vector(unsigned(x_1) + unsigned(x0));
    add_ln87_fu_363_p2 <= std_logic_vector(unsigned(add_ln87_1_fu_359_p2) + unsigned(select_ln82_fu_285_p3));
    add_ln93_1_fu_440_p2 <= std_logic_vector(unsigned(zext_ln93_fu_436_p1) + unsigned(act_mem));
    add_ln93_2_fu_397_p2 <= std_logic_vector(unsigned(mul_ln82_fu_332_p2) + unsigned(add_ln87_fu_363_p2));
    add_ln93_fu_403_p2 <= std_logic_vector(unsigned(add_ln93_2_fu_397_p2) + unsigned(sub_ln92));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, m_axi_gmem0_RVALID, ap_predicate_op92_read_state11, load_input_fifo5_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (load_input_fifo5_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_predicate_op92_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, m_axi_gmem0_RVALID, ap_block_state4_io, ap_predicate_op92_read_state11, load_input_fifo5_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (load_input_fifo5_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_predicate_op92_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, m_axi_gmem0_RVALID, ap_block_state4_io, ap_predicate_op92_read_state11, load_input_fifo5_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (load_input_fifo5_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_predicate_op92_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter10_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op92_read_state11)
    begin
                ap_block_state11_pp0_stage0_iter10 <= ((ap_predicate_op92_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage0_iter11_assign_proc : process(load_input_fifo5_full_n)
    begin
                ap_block_state12_pp0_stage0_iter11 <= (load_input_fifo5_full_n = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem0_ARREADY, ap_predicate_op85_readreq_state4)
    begin
                ap_block_state4_io <= ((m_axi_gmem0_ARREADY = ap_const_logic_0) and (ap_predicate_op85_readreq_state4 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_295_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_295 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln82_fu_266_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln82_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_p_0_phi_fu_199_p4_assign_proc : process(icmp_ln82_reg_556_pp0_iter10_reg, or_ln87_1_reg_560_pp0_iter10_reg, in_val_reg_575, ap_phi_reg_pp0_iter11_p_0_reg_195)
    begin
        if (((or_ln87_1_reg_560_pp0_iter10_reg = ap_const_lv1_0) and (icmp_ln82_reg_556_pp0_iter10_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_phi_fu_199_p4 <= in_val_reg_575;
        else 
            ap_phi_mux_p_0_phi_fu_199_p4 <= ap_phi_reg_pp0_iter11_p_0_reg_195;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_0_reg_195 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op85_readreq_state4_assign_proc : process(icmp_ln82_reg_556_pp0_iter2_reg, or_ln87_1_reg_560_pp0_iter2_reg)
    begin
                ap_predicate_op85_readreq_state4 <= ((or_ln87_1_reg_560_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln82_reg_556_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op92_read_state11_assign_proc : process(icmp_ln82_reg_556_pp0_iter9_reg, or_ln87_1_reg_560_pp0_iter9_reg)
    begin
                ap_predicate_op92_read_state11 <= ((or_ln87_1_reg_560_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln82_reg_556_pp0_iter9_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp93_fu_238_p2 <= "1" when (unsigned(add92_fu_233_p2) < unsigned(pad)) else "0";
    cmp93_mid1_fu_303_p2 <= "1" when (unsigned(add92_mid1_fu_298_p2) < unsigned(pad)) else "0";

    gmem0_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem0_ARREADY, ap_predicate_op85_readreq_state4, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op85_readreq_state4 = ap_const_boolean_1))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_gmem0_RVALID, ap_predicate_op92_read_state11, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op92_read_state11 = ap_const_boolean_1))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_3_fu_260_p2 <= std_logic_vector(unsigned(i_fu_90) + unsigned(ap_const_lv32_1));
    icmp_ln82_fu_266_p2 <= "1" when (indvar_flatten160_fu_94 = bound158) else "0";
    icmp_ln84_fu_280_p2 <= "1" when (j_fu_86 = nkx) else "0";
    icmp_ln87_1_fu_374_p2 <= "1" when (unsigned(add_ln87_fu_363_p2) < unsigned(add107)) else "0";
    icmp_ln87_fu_369_p2 <= "1" when (unsigned(add_ln87_fu_363_p2) < unsigned(pad)) else "0";

    load_input_fifo5_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, load_input_fifo5_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            load_input_fifo5_blk_n <= load_input_fifo5_full_n;
        else 
            load_input_fifo5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    load_input_fifo5_din <= ap_phi_mux_p_0_phi_fu_199_p4;

    load_input_fifo5_write_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            load_input_fifo5_write <= ap_const_logic_1;
        else 
            load_input_fifo5_write <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= gmem0_addr_reg_569;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_1;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op85_readreq_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op85_readreq_state4 = ap_const_boolean_1))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, ap_predicate_op92_read_state11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op92_read_state11 = ap_const_boolean_1))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    mul_ln82_fu_332_p0 <= std_logic_vector(unsigned(sub) + unsigned(select_ln82_1_fu_319_p3));
    or_ln87_1_fu_391_p2 <= (select_ln82_2_fu_343_p3 or or_ln87_2_fu_385_p2);
    or_ln87_2_fu_385_p2 <= (xor_ln87_fu_379_p2 or icmp_ln87_fu_369_p2);
    or_ln87_3_fu_337_p2 <= (rev20_fu_313_p2 or cmp93_mid1_fu_303_p2);
    or_ln87_fu_254_p2 <= (rev18_fu_248_p2 or cmp93_fu_238_p2);
    rev18_fu_248_p2 <= (ult_fu_243_p2 xor ap_const_lv1_1);
    rev20_fu_313_p2 <= (ult19_fu_308_p2 xor ap_const_lv1_1);
    select_ln82_1_fu_319_p3 <= 
        add92_mid1_fu_298_p2 when (icmp_ln84_fu_280_p2(0) = '1') else 
        add92_fu_233_p2;
    select_ln82_2_fu_343_p3 <= 
        or_ln87_3_fu_337_p2 when (icmp_ln84_fu_280_p2(0) = '1') else 
        or_ln87_fu_254_p2;
    select_ln82_3_fu_351_p3 <= 
        i_3_fu_260_p2 when (icmp_ln84_fu_280_p2(0) = '1') else 
        i_fu_90;
    select_ln82_fu_285_p3 <= 
        ap_const_lv32_0 when (icmp_ln84_fu_280_p2(0) = '1') else 
        j_fu_86;
        sext_ln93_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_445_p4),64));

    shl_ln2_fu_429_p3 <= (add_ln93_reg_564 & ap_const_lv2_0);
    tmp3_fu_228_p2 <= std_logic_vector(unsigned(y0) + unsigned(i_fu_90));
    tmp3_mid1_fu_293_p2 <= std_logic_vector(unsigned(y0) + unsigned(i_3_fu_260_p2));
    trunc_ln_fu_445_p4 <= add_ln93_1_fu_440_p2(63 downto 2);
    ult19_fu_308_p2 <= "1" when (unsigned(add92_mid1_fu_298_p2) < unsigned(add97)) else "0";
    ult_fu_243_p2 <= "1" when (unsigned(add92_fu_233_p2) < unsigned(add97)) else "0";
    xor_ln87_fu_379_p2 <= (icmp_ln87_1_fu_374_p2 xor ap_const_lv1_1);
    zext_ln93_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_429_p3),64));
end behav;
