-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_kernel_load_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    act_mem : IN STD_LOGIC_VECTOR (63 downto 0);
    load_input_fifo5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    load_input_fifo5_full_n : IN STD_LOGIC;
    load_input_fifo5_write : OUT STD_LOGIC;
    base_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    nky : IN STD_LOGIC_VECTOR (31 downto 0);
    nkx : IN STD_LOGIC_VECTOR (31 downto 0);
    nof : IN STD_LOGIC_VECTOR (31 downto 0);
    nif : IN STD_LOGIC_VECTOR (31 downto 0);
    noy : IN STD_LOGIC_VECTOR (31 downto 0);
    nox : IN STD_LOGIC_VECTOR (31 downto 0);
    stride : IN STD_LOGIC_VECTOR (31 downto 0);
    pad : IN STD_LOGIC_VECTOR (31 downto 0);
    bb_en : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_en : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of conv_kernel_load_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv65_124924925 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100100100100100100100100100100101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv38_31 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000110001";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_en_read_read_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bb_en_read_read_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_567 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_reg_572 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul52_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul52_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul58_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul58_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul73_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul73_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal add97_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add97_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal add107_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add107_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln92_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln92_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound158_fu_381_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound158_reg_619 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln46_1_fu_395_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln46_1_reg_624 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln46_3_fu_408_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal mul_ln46_3_reg_630 : STD_LOGIC_VECTOR (69 downto 0);
    signal mul_ln46_4_fu_420_p2 : STD_LOGIC_VECTOR (101 downto 0);
    signal mul_ln46_4_reg_636 : STD_LOGIC_VECTOR (101 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln50_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_out_3_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_out_3_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal y0_1_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln72_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal f_in_1_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_in_1_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln74_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x0_3_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln80_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_ap_done : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_ap_idle : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_ap_ready : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_load_input_fifo5_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_load_input_fifo5_write : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_done : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_idle : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_ready : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_write : STD_LOGIC;
    signal y0_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln68_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x0_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln70_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_in_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln78_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start_reg : STD_LOGIC := '0';
    signal f_out_1_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_fu_279_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_fu_289_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln46_fu_289_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln46_1_fu_305_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_1_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_2_fu_315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_2_fu_315_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln46_2_fu_315_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal empty_54_fu_343_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_54_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul73_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound158_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound158_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_1_fu_395_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln46_1_fu_395_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln46_3_fu_408_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln46_3_fu_408_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln46_4_fu_420_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_4_fu_420_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal x_1_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op61_call_state5 : BOOLEAN;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal bound158_fu_381_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound158_fu_381_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln46_1_fu_395_p00 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln46_2_fu_315_p00 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln46_3_fu_408_p00 : STD_LOGIC_VECTOR (69 downto 0);
    signal mul_ln46_3_fu_408_p10 : STD_LOGIC_VECTOR (69 downto 0);
    signal mul_ln46_4_fu_420_p00 : STD_LOGIC_VECTOR (101 downto 0);
    signal mul_ln46_4_fu_420_p10 : STD_LOGIC_VECTOR (101 downto 0);
    signal mul_ln46_fu_289_p00 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv_kernel_load_input_Pipeline_load_input_loop6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        load_input_fifo5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        load_input_fifo5_full_n : IN STD_LOGIC;
        load_input_fifo5_write : OUT STD_LOGIC;
        noy : IN STD_LOGIC_VECTOR (31 downto 0);
        nox : IN STD_LOGIC_VECTOR (31 downto 0);
        base_addr : IN STD_LOGIC_VECTOR (31 downto 0);
        mul_ln46_4 : IN STD_LOGIC_VECTOR (101 downto 0);
        mul_ln46_3 : IN STD_LOGIC_VECTOR (69 downto 0);
        mul_ln46_1 : IN STD_LOGIC_VECTOR (37 downto 0);
        icmp_ln50 : IN STD_LOGIC_VECTOR (0 downto 0);
        act_mem : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv_kernel_load_input_Pipeline_load_input_loop14_load_input_loop15 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        load_input_fifo5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        load_input_fifo5_full_n : IN STD_LOGIC;
        load_input_fifo5_write : OUT STD_LOGIC;
        y0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad : IN STD_LOGIC_VECTOR (31 downto 0);
        add97 : IN STD_LOGIC_VECTOR (31 downto 0);
        bound158 : IN STD_LOGIC_VECTOR (63 downto 0);
        nkx : IN STD_LOGIC_VECTOR (31 downto 0);
        sub : IN STD_LOGIC_VECTOR (31 downto 0);
        mul58 : IN STD_LOGIC_VECTOR (31 downto 0);
        x0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        add107 : IN STD_LOGIC_VECTOR (31 downto 0);
        sub_ln92 : IN STD_LOGIC_VECTOR (31 downto 0);
        act_mem : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv_kernel_mul_32ns_34ns_65_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component conv_kernel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_kernel_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv_kernel_mul_30ns_7ns_38_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component conv_kernel_mul_30ns_37ns_70_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (36 downto 0);
        dout : OUT STD_LOGIC_VECTOR (69 downto 0) );
    end component;


    component conv_kernel_mul_32ns_68ns_102_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (67 downto 0);
        dout : OUT STD_LOGIC_VECTOR (101 downto 0) );
    end component;



begin
    grp_load_input_Pipeline_load_input_loop6_fu_238 : component conv_kernel_load_input_Pipeline_load_input_loop6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start,
        ap_done => grp_load_input_Pipeline_load_input_loop6_fu_238_ap_done,
        ap_idle => grp_load_input_Pipeline_load_input_loop6_fu_238_ap_idle,
        ap_ready => grp_load_input_Pipeline_load_input_loop6_fu_238_ap_ready,
        m_axi_gmem0_AWVALID => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        load_input_fifo5_din => grp_load_input_Pipeline_load_input_loop6_fu_238_load_input_fifo5_din,
        load_input_fifo5_full_n => load_input_fifo5_full_n,
        load_input_fifo5_write => grp_load_input_Pipeline_load_input_loop6_fu_238_load_input_fifo5_write,
        noy => noy,
        nox => nox,
        base_addr => base_addr,
        mul_ln46_4 => mul_ln46_4_reg_636,
        mul_ln46_3 => mul_ln46_3_reg_630,
        mul_ln46_1 => mul_ln46_1_reg_624,
        icmp_ln50 => icmp_ln50_reg_641,
        act_mem => act_mem);

    grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254 : component conv_kernel_load_input_Pipeline_load_input_loop14_load_input_loop15
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start,
        ap_done => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_done,
        ap_idle => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_idle,
        ap_ready => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_ready,
        m_axi_gmem0_AWVALID => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        load_input_fifo5_din => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_din,
        load_input_fifo5_full_n => load_input_fifo5_full_n,
        load_input_fifo5_write => grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_write,
        y0 => y0_reg_168,
        y_2 => y_2_reg_214,
        pad => pad,
        add97 => add97_reg_604,
        bound158 => bound158_reg_619,
        nkx => nkx,
        sub => sub_reg_678,
        mul58 => mul58_reg_590,
        x0 => x0_reg_180,
        x_1 => x_reg_226,
        add107 => add107_reg_609,
        sub_ln92 => sub_ln92_reg_614,
        act_mem => act_mem);

    mul_32ns_34ns_65_1_1_U65 : component conv_kernel_mul_32ns_34ns_65_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        din0 => mul_ln46_fu_289_p0,
        din1 => mul_ln46_fu_289_p1,
        dout => mul_ln46_fu_289_p2);

    mul_32ns_34ns_65_1_1_U66 : component conv_kernel_mul_32ns_34ns_65_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        din0 => mul_ln46_2_fu_315_p0,
        din1 => mul_ln46_2_fu_315_p1,
        dout => mul_ln46_2_fu_315_p2);

    mul_32s_32s_32_1_1_U67 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => stride,
        din1 => noy,
        dout => mul52_fu_331_p2);

    mul_32s_32s_32_1_1_U68 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => stride,
        din1 => nox,
        dout => mul58_fu_337_p2);

    mul_32ns_32ns_64_1_1_U69 : component conv_kernel_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => bound158_fu_381_p0,
        din1 => bound158_fu_381_p1,
        dout => bound158_fu_381_p2);

    mul_30ns_7ns_38_1_1_U70 : component conv_kernel_mul_30ns_7ns_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 7,
        dout_WIDTH => 38)
    port map (
        din0 => mul_ln46_1_fu_395_p0,
        din1 => mul_ln46_1_fu_395_p1,
        dout => mul_ln46_1_fu_395_p2);

    mul_30ns_37ns_70_1_1_U71 : component conv_kernel_mul_30ns_37ns_70_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 37,
        dout_WIDTH => 70)
    port map (
        din0 => mul_ln46_3_fu_408_p0,
        din1 => mul_ln46_3_fu_408_p1,
        dout => mul_ln46_3_fu_408_p2);

    mul_32ns_68ns_102_1_1_U72 : component conv_kernel_mul_32ns_68ns_102_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 68,
        dout_WIDTH => 102)
    port map (
        din0 => mul_ln46_4_fu_420_p0,
        din1 => mul_ln46_4_fu_420_p1,
        dout => mul_ln46_4_fu_420_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_ready = ap_const_logic_1)) then 
                    grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_input_Pipeline_load_input_loop6_fu_238_ap_ready = ap_const_logic_1)) then 
                    grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    f_in_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                f_in_reg_192 <= f_in_1_reg_673;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln72_fu_454_p2 = ap_const_lv1_1))) then 
                f_in_reg_192 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    f_out_1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (bb_en = ap_const_lv1_1) and (conv_en_read_read_fu_96_p2 = ap_const_lv1_1))) then 
                f_out_1_fu_92 <= ap_const_lv32_0;
            elsif (((icmp_ln70_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                f_out_1_fu_92 <= f_out_3_reg_649;
            end if; 
        end if;
    end process;

    phi_mul_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_mul_reg_203 <= add_ln74_reg_665;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln72_fu_454_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_203 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln74_fu_469_p2 = ap_const_lv1_1))) then 
                x0_reg_180 <= x0_3_fu_485_p2;
            elsif (((icmp_ln70_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                x0_reg_180 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                x_reg_226 <= x_1_reg_694;
            elsif (((icmp_ln78_fu_490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                x_reg_226 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln72_fu_454_p2 = ap_const_lv1_0))) then 
                y0_reg_168 <= y0_1_fu_459_p2;
            elsif (((icmp_ln68_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                y0_reg_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_2_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                y_2_reg_214 <= y_fu_505_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln74_fu_469_p2 = ap_const_lv1_0))) then 
                y_2_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (bb_en = ap_const_lv1_1) and (conv_en_read_read_fu_96_p2 = ap_const_lv1_1))) then
                add107_reg_609 <= add107_fu_361_p2;
                add97_reg_604 <= add97_fu_355_p2;
                bound158_reg_619 <= bound158_fu_381_p2;
                mul52_reg_584 <= mul52_fu_331_p2;
                mul58_reg_590 <= mul58_fu_337_p2;
                mul73_reg_596 <= mul73_fu_349_p2;
                sub_ln92_reg_614 <= sub_ln92_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln74_reg_665 <= add_ln74_fu_464_p2;
                f_in_1_reg_673 <= f_in_1_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                f_out_3_reg_649 <= f_out_3_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln50_reg_641 <= icmp_ln50_fu_426_p2;
                mul_ln46_4_reg_636 <= mul_ln46_4_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln46_1_reg_624 <= mul_ln46_1_fu_395_p2;
                mul_ln46_3_reg_630 <= mul_ln46_3_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln74_fu_469_p2 = ap_const_lv1_0))) then
                sub_reg_678 <= sub_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0))) then
                tmp_2_reg_572 <= mul_ln46_2_fu_315_p2(64 downto 35);
                tmp_reg_567 <= mul_ln46_fu_289_p2(64 downto 35);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                x_1_reg_694 <= x_1_fu_500_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, bb_en, conv_en, conv_en_read_read_fu_96_p2, bb_en_read_read_fu_102_p2, ap_CS_fsm_state6, ap_CS_fsm_state8, icmp_ln72_fu_454_p2, ap_CS_fsm_state9, icmp_ln74_fu_469_p2, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_done, icmp_ln68_fu_434_p2, ap_CS_fsm_state7, icmp_ln70_fu_445_p2, ap_CS_fsm_state10, icmp_ln78_fu_490_p2, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (bb_en = ap_const_lv1_1) and (conv_en_read_read_fu_96_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (bb_en_read_read_fu_102_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln68_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln70_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln72_fu_454_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln74_fu_469_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln78_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln80_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add107_fu_361_p2 <= std_logic_vector(unsigned(mul58_fu_337_p2) + unsigned(pad));
    add97_fu_355_p2 <= std_logic_vector(unsigned(mul52_fu_331_p2) + unsigned(pad));
    add_ln46_1_fu_305_p0 <= noy;
    add_ln46_1_fu_305_p2 <= std_logic_vector(signed(add_ln46_1_fu_305_p0) + signed(ap_const_lv32_6));
    add_ln46_fu_279_p0 <= nox;
    add_ln46_fu_279_p2 <= std_logic_vector(signed(add_ln46_fu_279_p0) + signed(ap_const_lv32_6));
    add_ln74_fu_464_p2 <= std_logic_vector(unsigned(phi_mul_reg_203) + unsigned(mul52_reg_584));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_done)
    begin
        if ((grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_on_subcall_done)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state5_on_subcall_done_assign_proc : process(grp_load_input_Pipeline_load_input_loop6_fu_238_ap_done, ap_predicate_op61_call_state5)
    begin
                ap_block_state5_on_subcall_done <= ((ap_predicate_op61_call_state5 = ap_const_boolean_1) and (grp_load_input_Pipeline_load_input_loop6_fu_238_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op61_call_state5_assign_proc : process(bb_en, conv_en)
    begin
                ap_predicate_op61_call_state5 <= ((bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bb_en_read_read_fu_102_p2 <= bb_en;
    bound158_fu_381_p0 <= bound158_fu_381_p00(32 - 1 downto 0);
    bound158_fu_381_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nky),64));
    bound158_fu_381_p1 <= bound158_fu_381_p10(32 - 1 downto 0);
    bound158_fu_381_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nkx),64));
    conv_en_read_read_fu_96_p2 <= conv_en;
    empty_54_fu_343_p0 <= stride;
    empty_54_fu_343_p2 <= std_logic_vector(shift_left(unsigned(empty_54_fu_343_p0),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    f_in_1_fu_474_p2 <= std_logic_vector(unsigned(f_in_reg_192) + unsigned(ap_const_lv32_1));
    f_out_3_fu_439_p2 <= std_logic_vector(unsigned(f_out_1_fu_92) + unsigned(ap_const_lv32_1));
    grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_ap_start_reg;
    grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start <= grp_load_input_Pipeline_load_input_loop6_fu_238_ap_start_reg;
    icmp_ln50_fu_426_p2 <= "1" when (mul_ln46_1_reg_624 = ap_const_lv38_0) else "0";
    icmp_ln68_fu_434_p2 <= "1" when (f_out_1_fu_92 = nof) else "0";
    icmp_ln70_fu_445_p2 <= "1" when (unsigned(y0_reg_168) < unsigned(mul52_reg_584)) else "0";
    icmp_ln72_fu_454_p2 <= "1" when (unsigned(x0_reg_180) < unsigned(mul58_reg_590)) else "0";
    icmp_ln74_fu_469_p2 <= "1" when (f_in_reg_192 = nif) else "0";
    icmp_ln78_fu_490_p2 <= "1" when (unsigned(y_2_reg_214) < unsigned(mul73_reg_596)) else "0";
    icmp_ln80_fu_495_p2 <= "1" when (unsigned(x_reg_226) < unsigned(mul73_reg_596)) else "0";

    load_input_fifo5_din_assign_proc : process(bb_en, conv_en, grp_load_input_Pipeline_load_input_loop6_fu_238_load_input_fifo5_din, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_din, ap_CS_fsm_state12, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            load_input_fifo5_din <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_din;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0))) then 
            load_input_fifo5_din <= grp_load_input_Pipeline_load_input_loop6_fu_238_load_input_fifo5_din;
        else 
            load_input_fifo5_din <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_din;
        end if; 
    end process;


    load_input_fifo5_write_assign_proc : process(bb_en, conv_en, grp_load_input_Pipeline_load_input_loop6_fu_238_load_input_fifo5_write, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_write, ap_CS_fsm_state12, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            load_input_fifo5_write <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_load_input_fifo5_write;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0))) then 
            load_input_fifo5_write <= grp_load_input_Pipeline_load_input_loop6_fu_238_load_input_fifo5_write;
        else 
            load_input_fifo5_write <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_ARADDR_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARADDR, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARADDR, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARADDR <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARADDR <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARADDR;
        else 
            m_axi_gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem0_ARBURST_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARBURST, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARBURST, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARBURST <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARBURST <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARBURST;
        else 
            m_axi_gmem0_ARBURST <= "XX";
        end if; 
    end process;


    m_axi_gmem0_ARCACHE_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARCACHE, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARCACHE, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARCACHE <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARCACHE <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARCACHE;
        else 
            m_axi_gmem0_ARCACHE <= "XXXX";
        end if; 
    end process;


    m_axi_gmem0_ARID_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARID, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARID, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARID <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARID <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARID;
        else 
            m_axi_gmem0_ARID <= "X";
        end if; 
    end process;


    m_axi_gmem0_ARLEN_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARLEN, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARLEN, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARLEN <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARLEN <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARLEN;
        else 
            m_axi_gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem0_ARLOCK_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARLOCK, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARLOCK, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARLOCK <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARLOCK <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARLOCK;
        else 
            m_axi_gmem0_ARLOCK <= "XX";
        end if; 
    end process;


    m_axi_gmem0_ARPROT_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARPROT, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARPROT, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARPROT <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARPROT <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARPROT;
        else 
            m_axi_gmem0_ARPROT <= "XXX";
        end if; 
    end process;


    m_axi_gmem0_ARQOS_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARQOS, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARQOS, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARQOS <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARQOS <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARQOS;
        else 
            m_axi_gmem0_ARQOS <= "XXXX";
        end if; 
    end process;


    m_axi_gmem0_ARREGION_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARREGION, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARREGION, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARREGION <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARREGION <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARREGION;
        else 
            m_axi_gmem0_ARREGION <= "XXXX";
        end if; 
    end process;


    m_axi_gmem0_ARSIZE_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARSIZE, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARSIZE, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARSIZE <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARSIZE <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARSIZE;
        else 
            m_axi_gmem0_ARSIZE <= "XXX";
        end if; 
    end process;


    m_axi_gmem0_ARUSER_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARUSER, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARUSER, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARUSER <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARUSER <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARUSER;
        else 
            m_axi_gmem0_ARUSER <= "X";
        end if; 
    end process;


    m_axi_gmem0_ARVALID_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARVALID, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARVALID, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_ARVALID <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARVALID <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_ARVALID;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(bb_en, conv_en, ap_CS_fsm_state11, icmp_ln80_fu_495_p2, grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_RREADY, grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_RREADY, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln80_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            m_axi_gmem0_RREADY <= grp_load_input_Pipeline_load_input_loop14_load_input_loop15_fu_254_m_axi_gmem0_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (bb_en = ap_const_lv1_1) and (conv_en = ap_const_lv1_0)))) then 
            m_axi_gmem0_RREADY <= grp_load_input_Pipeline_load_input_loop6_fu_238_m_axi_gmem0_RREADY;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    mul73_fu_349_p1 <= stride;
    mul73_fu_349_p2 <= std_logic_vector(unsigned(empty_54_fu_343_p2) - unsigned(mul73_fu_349_p1));
    mul_ln46_1_fu_395_p0 <= mul_ln46_1_fu_395_p00(30 - 1 downto 0);
    mul_ln46_1_fu_395_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_567),38));
    mul_ln46_1_fu_395_p1 <= ap_const_lv38_31(7 - 1 downto 0);
    mul_ln46_2_fu_315_p0 <= mul_ln46_2_fu_315_p00(32 - 1 downto 0);
    mul_ln46_2_fu_315_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_1_fu_305_p2),65));
    mul_ln46_2_fu_315_p1 <= ap_const_lv65_124924925(34 - 1 downto 0);
    mul_ln46_3_fu_408_p0 <= mul_ln46_3_fu_408_p00(30 - 1 downto 0);
    mul_ln46_3_fu_408_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_572),70));
    mul_ln46_3_fu_408_p1 <= mul_ln46_3_fu_408_p10(37 - 1 downto 0);
    mul_ln46_3_fu_408_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln46_1_fu_395_p2),70));
    mul_ln46_4_fu_420_p0 <= mul_ln46_4_fu_420_p00(32 - 1 downto 0);
    mul_ln46_4_fu_420_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nof),102));
    mul_ln46_4_fu_420_p1 <= mul_ln46_4_fu_420_p10(68 - 1 downto 0);
    mul_ln46_4_fu_420_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln46_3_reg_630),102));
    mul_ln46_fu_289_p0 <= mul_ln46_fu_289_p00(32 - 1 downto 0);
    mul_ln46_fu_289_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_fu_279_p2),65));
    mul_ln46_fu_289_p1 <= ap_const_lv65_124924925(34 - 1 downto 0);
    sub_fu_480_p2 <= std_logic_vector(unsigned(phi_mul_reg_203) - unsigned(pad));
    sub_ln92_fu_367_p2 <= std_logic_vector(unsigned(base_addr) - unsigned(pad));
    x0_3_fu_485_p2 <= std_logic_vector(unsigned(mul73_reg_596) + unsigned(x0_reg_180));
    x_1_fu_500_p1 <= stride;
    x_1_fu_500_p2 <= std_logic_vector(unsigned(x_reg_226) + unsigned(x_1_fu_500_p1));
    y0_1_fu_459_p2 <= std_logic_vector(unsigned(mul73_reg_596) + unsigned(y0_reg_168));
    y_fu_505_p1 <= stride;
    y_fu_505_p2 <= std_logic_vector(unsigned(y_2_reg_214) + unsigned(y_fu_505_p1));
end behav;
