-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_kernel_load_input_Pipeline_load_input_loop6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    load_input_fifo5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    load_input_fifo5_full_n : IN STD_LOGIC;
    load_input_fifo5_write : OUT STD_LOGIC;
    noy : IN STD_LOGIC_VECTOR (31 downto 0);
    nox : IN STD_LOGIC_VECTOR (31 downto 0);
    base_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln46_4 : IN STD_LOGIC_VECTOR (101 downto 0);
    mul_ln46_3 : IN STD_LOGIC_VECTOR (69 downto 0);
    mul_ln46_1 : IN STD_LOGIC_VECTOR (37 downto 0);
    icmp_ln50 : IN STD_LOGIC_VECTOR (0 downto 0);
    act_mem : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of conv_kernel_load_input_Pipeline_load_input_loop6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv70_0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv102_0 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv102_1 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv38_1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_const_lv70_1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal or_ln54_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_reg_1050_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal icmp_ln46_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1005_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal icmp_ln46_reg_1005_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln46_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal load_input_fifo5_blk_n : STD_LOGIC;
    signal first_iter_0_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp4_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln46_reg_1005_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1005_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1005_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1005_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1005_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1005_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1005_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln48_1_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_1_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln46_3_fu_425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_3_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln48_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln48_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_mid165_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_mid165_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln48_1_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln48_1_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_mid122_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_mid122_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln50_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_reg_1045 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_mid1_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_mid1_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln56_mid2_v_reg_1059 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem0_addr_10_read_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_first_iter_0_phi_fu_223_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal sext_ln54_fu_868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_116 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln56_fu_632_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_fu_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_fu_594_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_124 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_2_fu_646_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal x0_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_1_fu_780_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten46_fu_132 : STD_LOGIC_VECTOR (37 downto 0);
    signal select_ln50_3_fu_660_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal indvar_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln48_2_fu_502_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten93_fu_140 : STD_LOGIC_VECTOR (69 downto 0);
    signal select_ln48_4_fu_674_p3 : STD_LOGIC_VECTOR (69 downto 0);
    signal f_out_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln46_4_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten153_fu_148 : STD_LOGIC_VECTOR (101 downto 0);
    signal add_ln46_fu_332_p2 : STD_LOGIC_VECTOR (101 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln50_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_cast_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln50_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_out_2_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_out_2_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln56_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_4_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln46_fu_355_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln46_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln50_1_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln50_1_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln46_2_fu_382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln46_1_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln46_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_4_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln48_1_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_1_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln50_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_2_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln48_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_3_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_522_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln50_1_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_566_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_cast_mid1_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_mid1_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln56_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_1_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln56_fu_614_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln54_2_fu_640_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln50_1_fu_654_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln48_1_fu_668_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp5_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid1123_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid167_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln48_fu_743_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid124_fu_765_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid126_fu_769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_2_fu_759_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid1_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid1_fu_791_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid1125_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_53_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid169_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln46_5_fu_808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid128_fu_774_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln48_3_fu_815_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid1_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_2_fu_822_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln54_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln56_mid2_v_v_v_v_v_fu_836_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln54_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln54_1_fu_848_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_kernel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U31 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => f_out_fu_144,
        din1 => noy,
        dout => mul_ln48_fu_288_p2);

    mul_32s_32s_32_1_1_U32 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => f_out_2_fu_321_p2,
        din1 => noy,
        dout => mul_ln48_1_fu_369_p2);

    mul_32s_32s_32_1_1_U33 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp4_reg_1000,
        din1 => nox,
        dout => tmp5_fu_722_p2);

    mul_32s_32s_32_1_1_U34 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln48_1_reg_1014,
        din1 => nox,
        dout => tmp5_mid1123_fu_734_p2);

    mul_32s_32s_32_1_1_U35 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp4_mid165_reg_1029,
        din1 => nox,
        dout => tmp5_mid167_fu_750_p2);

    mul_32s_32s_32_1_1_U36 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp4_mid122_reg_1040,
        din1 => nox,
        dout => tmp5_mid124_fu_765_p2);

    mul_32s_32s_32_1_1_U37 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp4_mid1_reg_1054,
        din1 => nox,
        dout => tmp5_mid1_fu_787_p2);

    flow_control_loop_pipe_sequential_init_U : component conv_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    f_out_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    f_out_fu_144 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0))) then 
                    f_out_fu_144 <= select_ln46_4_fu_432_p3;
                end if;
            end if; 
        end if;
    end process;

    first_iter_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_1005 = ap_const_lv1_0))) then 
                first_iter_0_reg_219 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_219 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar_flatten153_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten153_fu_148 <= ap_const_lv102_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0))) then 
                    indvar_flatten153_fu_148 <= add_ln46_fu_332_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten46_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten46_fu_132 <= ap_const_lv38_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0))) then 
                    indvar_flatten46_fu_132 <= select_ln50_3_fu_660_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten93_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten93_fu_140 <= ap_const_lv70_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0))) then 
                    indvar_flatten93_fu_140 <= select_ln48_4_fu_674_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_124 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_124 <= select_ln54_2_fu_646_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_fu_136 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0))) then 
                    indvar_fu_136 <= select_ln48_2_fu_502_p3;
                end if;
            end if; 
        end if;
    end process;

    x0_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x0_fu_128 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln46_reg_1005 = ap_const_lv1_0))) then 
                    x0_fu_128 <= select_ln50_1_fu_780_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_116 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0))) then 
                    x_fu_116 <= select_ln56_fu_632_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_120 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0))) then 
                    y_fu_120 <= select_ln54_1_fu_594_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_327_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln48_1_reg_1034 <= and_ln48_1_fu_496_p2;
                and_ln50_reg_1045 <= and_ln50_fu_560_p2;
                icmp_ln48_reg_1009 <= icmp_ln48_fu_350_p2;
                mul_ln48_1_reg_1014 <= mul_ln48_1_fu_369_p2;
                or_ln48_reg_1024 <= or_ln48_fu_446_p2;
                or_ln54_reg_1050 <= or_ln54_fu_572_p2;
                select_ln46_3_reg_1019 <= select_ln46_3_fu_425_p3;
                tmp4_mid122_reg_1040 <= tmp4_mid122_fu_536_p2;
                tmp4_mid165_reg_1029 <= tmp4_mid165_fu_478_p2;
                tmp4_mid1_reg_1054 <= tmp4_mid1_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln46_reg_1005_pp0_iter10_reg <= icmp_ln46_reg_1005_pp0_iter9_reg;
                icmp_ln46_reg_1005_pp0_iter2_reg <= icmp_ln46_reg_1005;
                icmp_ln46_reg_1005_pp0_iter3_reg <= icmp_ln46_reg_1005_pp0_iter2_reg;
                icmp_ln46_reg_1005_pp0_iter4_reg <= icmp_ln46_reg_1005_pp0_iter3_reg;
                icmp_ln46_reg_1005_pp0_iter5_reg <= icmp_ln46_reg_1005_pp0_iter4_reg;
                icmp_ln46_reg_1005_pp0_iter6_reg <= icmp_ln46_reg_1005_pp0_iter5_reg;
                icmp_ln46_reg_1005_pp0_iter7_reg <= icmp_ln46_reg_1005_pp0_iter6_reg;
                icmp_ln46_reg_1005_pp0_iter8_reg <= icmp_ln46_reg_1005_pp0_iter7_reg;
                icmp_ln46_reg_1005_pp0_iter9_reg <= icmp_ln46_reg_1005_pp0_iter8_reg;
                or_ln54_reg_1050_pp0_iter2_reg <= or_ln54_reg_1050;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln46_reg_1005 <= icmp_ln46_fu_327_p2;
                tmp4_reg_1000 <= tmp4_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_1005_pp0_iter9_reg = ap_const_lv1_0))) then
                gmem0_addr_10_read_reg_1074 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_1005 = ap_const_lv1_0))) then
                sext_ln56_mid2_v_reg_1059 <= add_ln54_1_fu_848_p2(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln46_fu_332_p2 <= std_logic_vector(unsigned(indvar_flatten153_fu_148) + unsigned(ap_const_lv102_1));
    add_ln48_1_fu_668_p2 <= std_logic_vector(unsigned(indvar_flatten93_fu_140) + unsigned(ap_const_lv70_1));
    add_ln48_fu_440_p2 <= std_logic_vector(unsigned(select_ln46_fu_355_p3) + unsigned(ap_const_lv32_1));
    add_ln50_1_fu_654_p2 <= std_logic_vector(unsigned(indvar_flatten46_fu_132) + unsigned(ap_const_lv38_1));
    add_ln54_1_fu_848_p2 <= std_logic_vector(unsigned(zext_ln54_fu_844_p1) + unsigned(act_mem));
    add_ln54_2_fu_640_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_124) + unsigned(ap_const_lv6_1));
    add_ln54_fu_566_p2 <= std_logic_vector(unsigned(select_ln50_fu_522_p3) + unsigned(ap_const_lv3_1));
    add_ln56_fu_614_p2 <= std_logic_vector(unsigned(x_fu_116) + unsigned(ap_const_lv3_1));
    and_ln46_1_fu_414_p2 <= (xor_ln46_fu_390_p2 and icmp_ln54_fu_408_p2);
    and_ln46_fu_402_p2 <= (xor_ln46_fu_390_p2 and icmp_ln56_fu_396_p2);
    and_ln48_1_fu_496_p2 <= (xor_ln48_fu_484_p2 and and_ln46_1_fu_414_p2);
    and_ln48_fu_490_p2 <= (xor_ln48_fu_484_p2 and and_ln46_fu_402_p2);
    and_ln50_fu_560_p2 <= (or_ln50_3_fu_554_p2 and and_ln48_fu_490_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, m_axi_gmem0_RVALID, icmp_ln46_reg_1005_pp0_iter9_reg, load_input_fifo5_full_n, icmp_ln46_reg_1005_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln46_reg_1005_pp0_iter10_reg = ap_const_lv1_0) and (load_input_fifo5_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln46_reg_1005_pp0_iter9_reg = ap_const_lv1_0) and (m_axi_gmem0_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, m_axi_gmem0_RVALID, ap_block_state4_io, icmp_ln46_reg_1005_pp0_iter9_reg, load_input_fifo5_full_n, icmp_ln46_reg_1005_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln46_reg_1005_pp0_iter10_reg = ap_const_lv1_0) and (load_input_fifo5_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln46_reg_1005_pp0_iter9_reg = ap_const_lv1_0) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, m_axi_gmem0_RVALID, ap_block_state4_io, icmp_ln46_reg_1005_pp0_iter9_reg, load_input_fifo5_full_n, icmp_ln46_reg_1005_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln46_reg_1005_pp0_iter10_reg = ap_const_lv1_0) and (load_input_fifo5_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln46_reg_1005_pp0_iter9_reg = ap_const_lv1_0) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter10_assign_proc : process(m_axi_gmem0_RVALID, icmp_ln46_reg_1005_pp0_iter9_reg)
    begin
                ap_block_state11_pp0_stage0_iter10 <= ((icmp_ln46_reg_1005_pp0_iter9_reg = ap_const_lv1_0) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage0_iter11_assign_proc : process(load_input_fifo5_full_n, icmp_ln46_reg_1005_pp0_iter10_reg)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((icmp_ln46_reg_1005_pp0_iter10_reg = ap_const_lv1_0) and (load_input_fifo5_full_n = ap_const_logic_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem0_ARREADY, or_ln54_reg_1050_pp0_iter2_reg)
    begin
                ap_block_state4_io <= ((m_axi_gmem0_ARREADY = ap_const_logic_0) and (or_ln54_reg_1050_pp0_iter2_reg = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln46_fu_327_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_327_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln46_reg_1005, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln46_reg_1005 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_0_phi_fu_223_p4_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln46_reg_1005, ap_block_pp0_stage0, first_iter_0_reg_219)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln46_reg_1005 = ap_const_lv1_0))) then 
            ap_phi_mux_first_iter_0_phi_fu_223_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_223_p4 <= first_iter_0_reg_219;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_53_fu_802_p2 <= std_logic_vector(unsigned(tmp2_fu_726_p2) + unsigned(x0_fu_128));
    f_out_2_fu_321_p0 <= f_out_fu_144;
    f_out_2_fu_321_p2 <= std_logic_vector(signed(f_out_2_fu_321_p0) + signed(ap_const_lv32_1));

    gmem0_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem0_ARREADY, or_ln54_reg_1050_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln54_reg_1050_pp0_iter2_reg = ap_const_lv1_1))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_gmem0_RVALID, icmp_ln46_reg_1005_pp0_iter9_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln46_reg_1005_pp0_iter9_reg = ap_const_lv1_0))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln46_fu_327_p2 <= "1" when (indvar_flatten153_fu_148 = mul_ln46_4) else "0";
    icmp_ln48_fu_350_p2 <= "1" when (indvar_flatten93_fu_140 = mul_ln46_3) else "0";
    icmp_ln50_1_fu_420_p2 <= "1" when (indvar_flatten46_fu_132 = mul_ln46_1) else "0";
    icmp_ln54_fu_408_p2 <= "1" when (indvar_flatten_fu_124 = ap_const_lv6_31) else "0";
    icmp_ln56_fu_396_p2 <= "1" when (x_fu_116 = ap_const_lv3_7) else "0";

    load_input_fifo5_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, load_input_fifo5_full_n, icmp_ln46_reg_1005_pp0_iter10_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln46_reg_1005_pp0_iter10_reg = ap_const_lv1_0))) then 
            load_input_fifo5_blk_n <= load_input_fifo5_full_n;
        else 
            load_input_fifo5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    load_input_fifo5_din <= gmem0_addr_10_read_reg_1074;

    load_input_fifo5_write_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln46_reg_1005_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_1005_pp0_iter10_reg = ap_const_lv1_0))) then 
            load_input_fifo5_write <= ap_const_logic_1;
        else 
            load_input_fifo5_write <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= sext_ln54_fu_868_p1;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_7;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, or_ln54_reg_1050_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln54_reg_1050_pp0_iter2_reg = ap_const_lv1_1))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln46_reg_1005_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_1005_pp0_iter9_reg = ap_const_lv1_0))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    or_ln46_fu_363_p2 <= (icmp_ln48_fu_350_p2 or ap_phi_mux_first_iter_0_phi_fu_223_p4);
    or_ln48_1_fu_452_p2 <= (select_ln46_3_fu_425_p3 or or_ln46_fu_363_p2);
    or_ln48_fu_446_p2 <= (select_ln46_3_fu_425_p3 or icmp_ln48_fu_350_p2);
    or_ln50_1_fu_530_p2 <= (or_ln48_1_fu_452_p2 or and_ln48_1_fu_496_p2);
    or_ln50_2_fu_548_p2 <= (xor_ln50_fu_542_p2 or icmp_ln48_fu_350_p2);
    or_ln50_3_fu_554_p2 <= (select_ln46_3_fu_425_p3 or or_ln50_2_fu_548_p2);
    or_ln50_4_fu_516_p2 <= (or_ln50_fu_510_p2 or icmp_ln48_fu_350_p2);
    or_ln50_fu_510_p2 <= (select_ln46_3_fu_425_p3 or and_ln48_1_fu_496_p2);
    or_ln54_fu_572_p2 <= (or_ln50_1_fu_530_p2 or and_ln50_fu_560_p2);
    or_ln56_1_fu_626_p2 <= (or_ln56_fu_620_p2 or or_ln48_fu_446_p2);
    or_ln56_fu_620_p2 <= (and_ln50_fu_560_p2 or and_ln48_1_fu_496_p2);
    p_mid128_fu_774_p2 <= std_logic_vector(unsigned(tmp2_mid126_fu_769_p2) + unsigned(x0_2_fu_759_p2));
    p_mid1_fu_796_p2 <= std_logic_vector(unsigned(tmp2_mid1_fu_791_p2) + unsigned(select_ln50_1_fu_780_p3));
    select_ln46_1_fu_374_p3 <= 
        mul_ln48_1_fu_369_p2 when (icmp_ln48_fu_350_p2(0) = '1') else 
        mul_ln48_fu_288_p2;
    select_ln46_2_fu_382_p3 <= 
        ap_const_lv32_0 when (icmp_ln48_fu_350_p2(0) = '1') else 
        sub_ln50_fu_299_p2;
    select_ln46_3_fu_425_p3 <= 
        icmp_ln50 when (icmp_ln48_fu_350_p2(0) = '1') else 
        icmp_ln50_1_fu_420_p2;
    select_ln46_4_fu_432_p2 <= f_out_fu_144;
    select_ln46_4_fu_432_p3 <= 
        f_out_2_fu_321_p2 when (icmp_ln48_fu_350_p2(0) = '1') else 
        select_ln46_4_fu_432_p2;
    select_ln46_5_fu_808_p3 <= 
        tmp2_mid1125_fu_738_p2 when (icmp_ln48_reg_1009(0) = '1') else 
        empty_53_fu_802_p2;
    select_ln46_fu_355_p3 <= 
        ap_const_lv32_0 when (icmp_ln48_fu_350_p2(0) = '1') else 
        indvar_fu_136;
    select_ln48_1_fu_470_p3 <= 
        sub_ln50_1_fu_464_p2 when (select_ln46_3_fu_425_p3(0) = '1') else 
        select_ln46_2_fu_382_p3;
    select_ln48_2_fu_502_p3 <= 
        add_ln48_fu_440_p2 when (select_ln46_3_fu_425_p3(0) = '1') else 
        select_ln46_fu_355_p3;
    select_ln48_3_fu_815_p3 <= 
        tmp2_mid169_fu_754_p2 when (select_ln46_3_reg_1019(0) = '1') else 
        select_ln46_5_fu_808_p3;
    select_ln48_4_fu_674_p3 <= 
        ap_const_lv70_1 when (icmp_ln48_fu_350_p2(0) = '1') else 
        add_ln48_1_fu_668_p2;
    select_ln48_fu_743_p3 <= 
        ap_const_lv32_0 when (or_ln48_reg_1024(0) = '1') else 
        x0_fu_128;
    select_ln50_1_fu_780_p3 <= 
        x0_2_fu_759_p2 when (and_ln48_1_reg_1034(0) = '1') else 
        select_ln48_fu_743_p3;
    select_ln50_2_fu_822_p3 <= 
        p_mid128_fu_774_p2 when (and_ln48_1_reg_1034(0) = '1') else 
        select_ln48_3_fu_815_p3;
    select_ln50_3_fu_660_p3 <= 
        ap_const_lv38_1 when (or_ln48_fu_446_p2(0) = '1') else 
        add_ln50_1_fu_654_p2;
    select_ln50_fu_522_p3 <= 
        ap_const_lv3_0 when (or_ln50_4_fu_516_p2(0) = '1') else 
        y_fu_120;
    select_ln54_1_fu_594_p3 <= 
        add_ln54_fu_566_p2 when (and_ln50_fu_560_p2(0) = '1') else 
        select_ln50_fu_522_p3;
    select_ln54_2_fu_646_p3 <= 
        ap_const_lv6_1 when (or_ln50_4_fu_516_p2(0) = '1') else 
        add_ln54_2_fu_640_p2;
    select_ln54_fu_829_p3 <= 
        p_mid1_fu_796_p2 when (and_ln50_reg_1045(0) = '1') else 
        select_ln50_2_fu_822_p3;
    select_ln56_fu_632_p3 <= 
        ap_const_lv3_1 when (or_ln56_1_fu_626_p2(0) = '1') else 
        add_ln56_fu_614_p2;
        sext_ln54_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln56_mid2_v_reg_1059),64));

    sext_ln56_mid2_v_v_v_v_v_fu_836_p3 <= (select_ln54_fu_829_p3 & ap_const_lv2_0);
    shl_ln50_1_fu_458_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_fu_440_p2),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln50_fu_293_p2 <= std_logic_vector(shift_left(unsigned(indvar_fu_136),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    sub_ln50_1_fu_464_p2 <= std_logic_vector(unsigned(shl_ln50_1_fu_458_p2) - unsigned(add_ln48_fu_440_p2));
    sub_ln50_fu_299_p2 <= std_logic_vector(unsigned(shl_ln50_fu_293_p2) - unsigned(indvar_fu_136));
    tmp1_fu_309_p2 <= std_logic_vector(unsigned(mul_ln48_fu_288_p2) + unsigned(y_cast_fu_305_p1));
    tmp1_mid1_fu_582_p2 <= std_logic_vector(unsigned(select_ln46_1_fu_374_p3) + unsigned(y_cast_mid1_fu_578_p1));
    tmp2_fu_726_p2 <= std_logic_vector(unsigned(tmp5_fu_722_p2) + unsigned(base_addr));
    tmp2_mid1125_fu_738_p2 <= std_logic_vector(unsigned(tmp5_mid1123_fu_734_p2) + unsigned(base_addr));
    tmp2_mid126_fu_769_p2 <= std_logic_vector(unsigned(tmp5_mid124_fu_765_p2) + unsigned(base_addr));
    tmp2_mid169_fu_754_p2 <= std_logic_vector(unsigned(tmp5_mid167_fu_750_p2) + unsigned(base_addr));
    tmp2_mid1_fu_791_p2 <= std_logic_vector(unsigned(tmp5_mid1_fu_787_p2) + unsigned(base_addr));
    tmp4_fu_315_p2 <= std_logic_vector(unsigned(tmp1_fu_309_p2) + unsigned(sub_ln50_fu_299_p2));
    tmp4_mid122_fu_536_p2 <= std_logic_vector(unsigned(select_ln46_1_fu_374_p3) + unsigned(select_ln48_1_fu_470_p3));
    tmp4_mid165_fu_478_p2 <= std_logic_vector(unsigned(select_ln46_1_fu_374_p3) + unsigned(sub_ln50_1_fu_464_p2));
    tmp4_mid1_fu_588_p2 <= std_logic_vector(unsigned(tmp1_mid1_fu_582_p2) + unsigned(select_ln48_1_fu_470_p3));
    x0_2_fu_759_p2 <= std_logic_vector(unsigned(select_ln48_fu_743_p3) + unsigned(ap_const_lv32_7));
    xor_ln46_fu_390_p2 <= (icmp_ln48_fu_350_p2 xor ap_const_lv1_1);
    xor_ln48_fu_484_p2 <= (select_ln46_3_fu_425_p3 xor ap_const_lv1_1);
    xor_ln50_fu_542_p2 <= (icmp_ln54_fu_408_p2 xor ap_const_lv1_1);
    y_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_120),32));
    y_cast_mid1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_566_p2),32));
    zext_ln54_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln56_mid2_v_v_v_v_v_fu_836_p3),64));
end behav;
