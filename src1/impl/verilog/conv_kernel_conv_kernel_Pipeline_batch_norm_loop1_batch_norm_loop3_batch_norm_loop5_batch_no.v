// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_kernel_conv_kernel_Pipeline_batch_norm_loop1_batch_norm_loop3_batch_norm_loop5_batch_no (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        bn_weight_base,
        bn_weight_mem,
        add14_i,
        nof,
        bound213,
        bound184,
        bound172,
        icmp_ln314,
        pe_out_fifo_dout,
        pe_out_fifo_empty_n,
        pe_out_fifo_read,
        bn_en,
        bn_out_fifo_din,
        bn_out_fifo_full_n,
        bn_out_fifo_write,
        grp_fu_2953_p_din0,
        grp_fu_2953_p_din1,
        grp_fu_2953_p_opcode,
        grp_fu_2953_p_dout0,
        grp_fu_2953_p_ce,
        grp_fu_2949_p_din0,
        grp_fu_2949_p_din1,
        grp_fu_2949_p_dout0,
        grp_fu_2949_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [31:0] m_axi_gmem0_WDATA;
output  [3:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [31:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [31:0] bn_weight_base;
input  [63:0] bn_weight_mem;
input  [31:0] add14_i;
input  [31:0] nof;
input  [101:0] bound213;
input  [69:0] bound184;
input  [37:0] bound172;
input  [0:0] icmp_ln314;
input  [31:0] pe_out_fifo_dout;
input   pe_out_fifo_empty_n;
output   pe_out_fifo_read;
input  [0:0] bn_en;
output  [31:0] bn_out_fifo_din;
input   bn_out_fifo_full_n;
output   bn_out_fifo_write;
output  [31:0] grp_fu_2953_p_din0;
output  [31:0] grp_fu_2953_p_din1;
output  [1:0] grp_fu_2953_p_opcode;
input  [31:0] grp_fu_2953_p_dout0;
output   grp_fu_2953_p_ce;
output  [31:0] grp_fu_2949_p_din0;
output  [31:0] grp_fu_2949_p_din1;
input  [31:0] grp_fu_2949_p_dout0;
output   grp_fu_2949_p_ce;

reg ap_idle;
reg m_axi_gmem0_ARVALID;
reg[63:0] m_axi_gmem0_ARADDR;
reg m_axi_gmem0_RREADY;
reg pe_out_fifo_read;
reg bn_out_fifo_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [0:0] icmp_ln310_reg_654;
reg    ap_block_state3_io;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
reg    ap_block_state12_pp0_stage2_iter3;
wire    ap_block_state15_pp0_stage2_iter4;
wire    ap_block_state18_pp0_stage2_iter5;
wire    ap_block_state21_pp0_stage2_iter6;
reg    ap_block_pp0_stage2_subdone;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_AR;
wire    ap_block_pp0_stage2;
reg    gmem0_blk_n_R;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    pe_out_fifo_blk_n;
reg    bn_out_fifo_blk_n;
wire   [0:0] bn_en_read_reg_609;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_state16_pp0_stage0_iter5;
wire    ap_block_state19_pp0_stage0_iter6;
reg    ap_block_state22_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln310_fu_351_p2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
reg    ap_block_state11_pp0_stage1_iter3;
wire    ap_block_state14_pp0_stage1_iter4;
wire    ap_block_state17_pp0_stage1_iter5;
wire    ap_block_state20_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln310_reg_654_pp0_iter1_reg;
reg   [0:0] icmp_ln310_reg_654_pp0_iter2_reg;
reg   [0:0] icmp_ln310_reg_654_pp0_iter3_reg;
reg   [0:0] icmp_ln310_reg_654_pp0_iter4_reg;
reg   [0:0] icmp_ln310_reg_654_pp0_iter5_reg;
reg   [63:0] gmem0_addr_reg_658;
reg   [63:0] gmem0_addr_17_reg_664;
reg   [63:0] gmem0_addr_18_reg_670;
reg   [31:0] gmem0_addr_read_reg_676;
reg   [31:0] pe_out_fifo_read_reg_681;
wire   [31:0] bitcast_ln312_fu_562_p1;
reg   [31:0] gmem0_addr_17_read_reg_691;
reg   [31:0] gmem0_addr_17_read_reg_691_pp0_iter4_reg;
wire   [31:0] tmp_fu_566_p1;
reg   [31:0] tmp_reg_696;
reg   [31:0] tmp_reg_696_pp0_iter4_reg;
reg   [31:0] tmp_reg_696_pp0_iter5_reg;
reg   [31:0] tmp_reg_696_pp0_iter6_reg;
reg   [31:0] gmem0_addr_18_read_reg_702;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] gmem0_addr_18_read_reg_702_pp0_iter4_reg;
reg   [31:0] tmp1_reg_707;
wire   [31:0] bitcast_ln312_1_fu_570_p1;
reg   [31:0] tmp2_reg_717;
wire   [31:0] bitcast_ln312_2_fu_574_p1;
wire   [31:0] pass_val_1_fu_578_p3;
reg   [31:0] pass_val_1_reg_727;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire  signed [63:0] sext_ln310_fu_459_p1;
wire  signed [63:0] sext_ln310_1_fu_481_p1;
wire  signed [63:0] sext_ln310_2_fu_503_p1;
reg   [69:0] indvar_flatten199_fu_100;
wire   [69:0] select_ln312_fu_539_p3;
wire    ap_loop_init;
reg   [31:0] f_out_5_fu_104;
wire   [31:0] select_ln310_5_fu_507_p3;
reg   [101:0] indvar_flatten272_fu_108;
wire   [101:0] add_ln310_1_fu_356_p2;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] grp_fu_215_p0;
reg   [31:0] grp_fu_215_p1;
wire   [31:0] add13_i_fu_244_p2;
wire   [33:0] tmp_10_fu_249_p3;
wire   [63:0] p_cast22_fu_257_p1;
wire   [31:0] add16_i_fu_266_p2;
wire   [33:0] tmp_11_fu_271_p3;
wire   [63:0] p_cast23_fu_279_p1;
wire   [31:0] tmp9_fu_288_p2;
wire   [31:0] add21_i_fu_293_p2;
wire   [33:0] tmp_12_fu_298_p3;
wire   [63:0] p_cast24_fu_306_p1;
wire   [63:0] empty_fu_261_p2;
wire   [63:0] empty_58_fu_283_p2;
wire   [63:0] empty_59_fu_310_p2;
wire   [31:0] add_ln310_fu_345_p2;
wire   [31:0] add13_i_mid1_fu_365_p2;
wire   [33:0] p_mid1_fu_370_p3;
wire   [63:0] p_cast22_mid1_fu_378_p1;
wire   [31:0] add16_i_mid1_fu_387_p2;
wire   [33:0] p_mid_fu_392_p3;
wire   [63:0] p_cast23_mid1_fu_400_p1;
wire   [31:0] tmp9_mid1_fu_409_p2;
wire   [31:0] add21_i_mid1_fu_414_p2;
wire   [33:0] p_mid2_fu_419_p3;
wire   [63:0] p_cast24_mid1_fu_427_p1;
wire   [63:0] p_mid1230_fu_382_p2;
wire   [0:0] icmp_ln312_fu_446_p2;
wire   [61:0] p_cast16_mid1_fu_436_p4;
wire   [61:0] p_cast1_fu_315_p4;
wire   [61:0] select_ln310_3_fu_451_p3;
wire   [63:0] p_mid1234_fu_404_p2;
wire   [61:0] p_cast17_mid1_fu_463_p4;
wire   [61:0] p_cast2_fu_325_p4;
wire   [61:0] select_ln310_fu_473_p3;
wire   [63:0] p_mid1238_fu_431_p2;
wire   [61:0] p_cast18_mid1_fu_485_p4;
wire   [61:0] p_cast3_fu_335_p4;
wire   [61:0] select_ln310_4_fu_495_p3;
wire   [69:0] add_ln312_fu_533_p2;
reg   [1:0] grp_fu_215_opcode;
reg    ap_block_pp0_stage2_00001;
reg    ap_block_pp0_stage1_00001;
reg    grp_fu_215_ce;
reg    grp_fu_219_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter6_stage0;
reg    ap_idle_pp0_0to5;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to7;
reg    ap_done_pending_pp0;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_542;
reg    ap_condition_548;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

conv_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to5 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter6_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to5 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter6_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to5 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter6_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to5 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter6_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to5 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter6_stage0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to5 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter6_stage0))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_out_5_fu_104 <= 32'd0;
    end else if (((icmp_ln310_fu_351_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        f_out_5_fu_104 <= select_ln310_5_fu_507_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten199_fu_100 <= 70'd0;
    end else if (((icmp_ln310_fu_351_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten199_fu_100 <= select_ln312_fu_539_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten272_fu_108 <= 102'd0;
    end else if (((icmp_ln310_fu_351_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten272_fu_108 <= add_ln310_1_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem0_addr_17_read_reg_691 <= m_axi_gmem0_RDATA;
        gmem0_addr_17_read_reg_691_pp0_iter4_reg <= gmem0_addr_17_read_reg_691;
        icmp_ln310_reg_654 <= icmp_ln310_fu_351_p2;
        icmp_ln310_reg_654_pp0_iter1_reg <= icmp_ln310_reg_654;
        icmp_ln310_reg_654_pp0_iter2_reg <= icmp_ln310_reg_654_pp0_iter1_reg;
        icmp_ln310_reg_654_pp0_iter3_reg <= icmp_ln310_reg_654_pp0_iter2_reg;
        icmp_ln310_reg_654_pp0_iter4_reg <= icmp_ln310_reg_654_pp0_iter3_reg;
        icmp_ln310_reg_654_pp0_iter5_reg <= icmp_ln310_reg_654_pp0_iter4_reg;
        tmp_reg_696 <= tmp_fu_566_p1;
        tmp_reg_696_pp0_iter4_reg <= tmp_reg_696;
        tmp_reg_696_pp0_iter5_reg <= tmp_reg_696_pp0_iter4_reg;
        tmp_reg_696_pp0_iter6_reg <= tmp_reg_696_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln310_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem0_addr_17_reg_664 <= sext_ln310_1_fu_481_p1;
        gmem0_addr_18_reg_670 <= sext_ln310_2_fu_503_p1;
        gmem0_addr_reg_658 <= sext_ln310_fu_459_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem0_addr_18_read_reg_702 <= m_axi_gmem0_RDATA;
        gmem0_addr_18_read_reg_702_pp0_iter4_reg <= gmem0_addr_18_read_reg_702;
        pass_val_1_reg_727 <= pass_val_1_fu_578_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_read_reg_676 <= m_axi_gmem0_RDATA;
        pe_out_fifo_read_reg_681 <= pe_out_fifo_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (bn_en_read_reg_609 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp1_reg_707 <= grp_fu_2953_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((bn_en_read_reg_609 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp2_reg_717 <= grp_fu_2949_p_dout0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (icmp_ln310_reg_654 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln310_reg_654_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter6_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter6_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter6_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to7 = 1'b1;
    end else begin
        ap_idle_pp0_1to7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        bn_out_fifo_blk_n = bn_out_fifo_full_n;
    end else begin
        bn_out_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bn_out_fifo_write = 1'b1;
    end else begin
        bn_out_fifo_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln310_reg_654 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln310_reg_654 == 1'd0)))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_215_ce = 1'b1;
    end else begin
        grp_fu_215_ce = 1'b0;
    end
end

always @ (*) begin
    if ((bn_en_read_reg_609 == 1'd1)) begin
        if ((1'b1 == ap_condition_548)) begin
            grp_fu_215_opcode = 2'd1;
        end else if ((1'b1 == ap_condition_542)) begin
            grp_fu_215_opcode = 2'd0;
        end else begin
            grp_fu_215_opcode = 'bx;
        end
    end else begin
        grp_fu_215_opcode = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_215_p0 = tmp2_reg_717;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_215_p0 = tmp_fu_566_p1;
    end else begin
        grp_fu_215_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_215_p1 = bitcast_ln312_2_fu_574_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_215_p1 = bitcast_ln312_fu_562_p1;
    end else begin
        grp_fu_215_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_219_ce = 1'b1;
    end else begin
        grp_fu_219_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem0_ARADDR = gmem0_addr_18_reg_670;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln310_reg_654 == 1'd0))) begin
        m_axi_gmem0_ARADDR = gmem0_addr_17_reg_664;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln310_reg_654 == 1'd0))) begin
        m_axi_gmem0_ARADDR = gmem0_addr_reg_658;
    end else begin
        m_axi_gmem0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln310_reg_654 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln310_reg_654 == 1'd0)))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        pe_out_fifo_blk_n = pe_out_fifo_empty_n;
    end else begin
        pe_out_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pe_out_fifo_read = 1'b1;
    end else begin
        pe_out_fifo_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to5 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter6_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to7 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add13_i_fu_244_p2 = (f_out_5_fu_104 + bn_weight_base);

assign add13_i_mid1_fu_365_p2 = (add_ln310_fu_345_p2 + bn_weight_base);

assign add16_i_fu_266_p2 = (f_out_5_fu_104 + add14_i);

assign add16_i_mid1_fu_387_p2 = (add_ln310_fu_345_p2 + add14_i);

assign add21_i_fu_293_p2 = (tmp9_fu_288_p2 + add14_i);

assign add21_i_mid1_fu_414_p2 = (tmp9_mid1_fu_409_p2 + add14_i);

assign add_ln310_1_fu_356_p2 = (indvar_flatten272_fu_108 + 102'd1);

assign add_ln310_fu_345_p2 = (f_out_5_fu_104 + 32'd1);

assign add_ln312_fu_533_p2 = (indvar_flatten199_fu_100 + 70'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (bn_out_fifo_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((m_axi_gmem0_RVALID == 1'b0) | (pe_out_fifo_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (bn_out_fifo_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((m_axi_gmem0_RVALID == 1'b0) | (pe_out_fifo_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter7 == 1'b1) & (bn_out_fifo_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((m_axi_gmem0_RVALID == 1'b0) | (pe_out_fifo_empty_n == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_00001 = ((m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter3 = ((m_axi_gmem0_RVALID == 1'b0) | (pe_out_fifo_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter3 = (m_axi_gmem0_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter3 = (m_axi_gmem0_RVALID == 1'b0);
end

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp0_stage0_iter7 = (bn_out_fifo_full_n == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem0_ARREADY == 1'b0) & (icmp_ln310_reg_654 == 1'd0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem0_ARREADY == 1'b0) & (icmp_ln310_reg_654 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_542 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_00001));
end

always @ (*) begin
    ap_condition_548 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_00001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign bitcast_ln312_1_fu_570_p1 = gmem0_addr_17_read_reg_691_pp0_iter4_reg;

assign bitcast_ln312_2_fu_574_p1 = gmem0_addr_18_read_reg_702_pp0_iter4_reg;

assign bitcast_ln312_fu_562_p1 = gmem0_addr_read_reg_676;

assign bn_en_read_reg_609 = bn_en;

assign bn_out_fifo_din = pass_val_1_reg_727;

assign empty_58_fu_283_p2 = (p_cast23_fu_279_p1 + bn_weight_mem);

assign empty_59_fu_310_p2 = (p_cast24_fu_306_p1 + bn_weight_mem);

assign empty_fu_261_p2 = (p_cast22_fu_257_p1 + bn_weight_mem);

assign grp_fu_2949_p_ce = grp_fu_219_ce;

assign grp_fu_2949_p_din0 = tmp1_reg_707;

assign grp_fu_2949_p_din1 = bitcast_ln312_1_fu_570_p1;

assign grp_fu_2953_p_ce = grp_fu_215_ce;

assign grp_fu_2953_p_din0 = grp_fu_215_p0;

assign grp_fu_2953_p_din1 = grp_fu_215_p1;

assign grp_fu_2953_p_opcode = grp_fu_215_opcode;

assign icmp_ln310_fu_351_p2 = ((indvar_flatten272_fu_108 == bound213) ? 1'b1 : 1'b0);

assign icmp_ln312_fu_446_p2 = ((indvar_flatten199_fu_100 == bound184) ? 1'b1 : 1'b0);

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd1;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 32'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 4'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign p_cast16_mid1_fu_436_p4 = {{p_mid1230_fu_382_p2[63:2]}};

assign p_cast17_mid1_fu_463_p4 = {{p_mid1234_fu_404_p2[63:2]}};

assign p_cast18_mid1_fu_485_p4 = {{p_mid1238_fu_431_p2[63:2]}};

assign p_cast1_fu_315_p4 = {{empty_fu_261_p2[63:2]}};

assign p_cast22_fu_257_p1 = tmp_10_fu_249_p3;

assign p_cast22_mid1_fu_378_p1 = p_mid1_fu_370_p3;

assign p_cast23_fu_279_p1 = tmp_11_fu_271_p3;

assign p_cast23_mid1_fu_400_p1 = p_mid_fu_392_p3;

assign p_cast24_fu_306_p1 = tmp_12_fu_298_p3;

assign p_cast24_mid1_fu_427_p1 = p_mid2_fu_419_p3;

assign p_cast2_fu_325_p4 = {{empty_58_fu_283_p2[63:2]}};

assign p_cast3_fu_335_p4 = {{empty_59_fu_310_p2[63:2]}};

assign p_mid1230_fu_382_p2 = (p_cast22_mid1_fu_378_p1 + bn_weight_mem);

assign p_mid1234_fu_404_p2 = (p_cast23_mid1_fu_400_p1 + bn_weight_mem);

assign p_mid1238_fu_431_p2 = (p_cast24_mid1_fu_427_p1 + bn_weight_mem);

assign p_mid1_fu_370_p3 = {{add13_i_mid1_fu_365_p2}, {2'd0}};

assign p_mid2_fu_419_p3 = {{add21_i_mid1_fu_414_p2}, {2'd0}};

assign p_mid_fu_392_p3 = {{add16_i_mid1_fu_387_p2}, {2'd0}};

assign pass_val_1_fu_578_p3 = ((bn_en[0:0] == 1'b1) ? grp_fu_2953_p_dout0 : tmp_reg_696_pp0_iter6_reg);

assign select_ln310_3_fu_451_p3 = ((icmp_ln312_fu_446_p2[0:0] == 1'b1) ? p_cast16_mid1_fu_436_p4 : p_cast1_fu_315_p4);

assign select_ln310_4_fu_495_p3 = ((icmp_ln312_fu_446_p2[0:0] == 1'b1) ? p_cast18_mid1_fu_485_p4 : p_cast3_fu_335_p4);

assign select_ln310_5_fu_507_p3 = ((icmp_ln312_fu_446_p2[0:0] == 1'b1) ? add_ln310_fu_345_p2 : f_out_5_fu_104);

assign select_ln310_fu_473_p3 = ((icmp_ln312_fu_446_p2[0:0] == 1'b1) ? p_cast17_mid1_fu_463_p4 : p_cast2_fu_325_p4);

assign select_ln312_fu_539_p3 = ((icmp_ln312_fu_446_p2[0:0] == 1'b1) ? 70'd1 : add_ln312_fu_533_p2);

assign sext_ln310_1_fu_481_p1 = $signed(select_ln310_fu_473_p3);

assign sext_ln310_2_fu_503_p1 = $signed(select_ln310_4_fu_495_p3);

assign sext_ln310_fu_459_p1 = $signed(select_ln310_3_fu_451_p3);

assign tmp9_fu_288_p2 = (nof + f_out_5_fu_104);

assign tmp9_mid1_fu_409_p2 = (nof + add_ln310_fu_345_p2);

assign tmp_10_fu_249_p3 = {{add13_i_fu_244_p2}, {2'd0}};

assign tmp_11_fu_271_p3 = {{add16_i_fu_266_p2}, {2'd0}};

assign tmp_12_fu_298_p3 = {{add21_i_fu_293_p2}, {2'd0}};

assign tmp_fu_566_p1 = pe_out_fifo_read_reg_681;

endmodule //conv_kernel_conv_kernel_Pipeline_batch_norm_loop1_batch_norm_loop3_batch_norm_loop5_batch_no
