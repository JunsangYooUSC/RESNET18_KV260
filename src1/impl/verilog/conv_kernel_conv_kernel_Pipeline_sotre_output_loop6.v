// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_kernel_conv_kernel_Pipeline_sotre_output_loop6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        skip_out_fifo_dout,
        skip_out_fifo_empty_n,
        skip_out_fifo_read,
        noy,
        nox,
        base_addr_out,
        mul_ln271_3,
        mul_ln271_2,
        mul_ln271_1,
        icmp_ln275,
        act_mem
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [31:0] m_axi_gmem0_WDATA;
output  [3:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [31:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [31:0] skip_out_fifo_dout;
input   skip_out_fifo_empty_n;
output   skip_out_fifo_read;
input  [31:0] noy;
input  [31:0] nox;
input  [31:0] base_addr_out;
input  [102:0] mul_ln271_3;
input  [70:0] mul_ln271_2;
input  [38:0] mul_ln271_1;
input  [0:0] icmp_ln275;
input  [63:0] act_mem;

reg ap_idle;
reg m_axi_gmem0_AWVALID;
reg m_axi_gmem0_WVALID;
reg m_axi_gmem0_BREADY;
reg skip_out_fifo_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] or_ln279_reg_1117;
reg   [0:0] or_ln279_reg_1117_pp0_iter2_reg;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg   [0:0] icmp_ln281_1_reg_1126;
reg   [0:0] icmp_ln281_1_reg_1126_pp0_iter8_reg;
reg    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln271_fu_348_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_B;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_W;
reg    gmem0_blk_n_AW;
reg    skip_out_fifo_blk_n;
reg   [0:0] first_iter_0_reg_232;
reg    ap_block_pp0_stage0_11001;
wire   [69:0] mul_ln271_1_cast_fu_244_p1;
reg   [69:0] mul_ln271_1_cast_reg_1055;
wire   [101:0] mul_ln271_2_cast_fu_248_p1;
reg   [101:0] mul_ln271_2_cast_reg_1060;
wire  signed [31:0] tmp7_fu_336_p2;
reg  signed [31:0] tmp7_reg_1065;
reg   [0:0] icmp_ln271_reg_1070;
wire   [0:0] icmp_ln273_fu_371_p2;
reg   [0:0] icmp_ln273_reg_1074;
wire  signed [31:0] mul_ln273_1_fu_390_p2;
reg  signed [31:0] mul_ln273_1_reg_1079;
wire   [0:0] select_ln271_3_fu_446_p3;
reg   [0:0] select_ln271_3_reg_1084;
wire   [0:0] or_ln273_fu_467_p2;
reg   [0:0] or_ln273_reg_1089;
wire  signed [31:0] tmp7_mid1449_fu_499_p2;
reg  signed [31:0] tmp7_mid1449_reg_1095;
wire   [0:0] and_ln273_1_fu_517_p2;
reg   [0:0] and_ln273_1_reg_1100;
wire  signed [31:0] tmp7_mid1401_fu_557_p2;
reg  signed [31:0] tmp7_mid1401_reg_1107;
wire   [0:0] and_ln275_fu_581_p2;
reg   [0:0] and_ln275_reg_1112;
wire   [0:0] or_ln279_fu_593_p2;
wire  signed [31:0] tmp7_mid1_fu_609_p2;
reg  signed [31:0] tmp7_mid1_reg_1121;
wire   [0:0] icmp_ln281_1_fu_652_p2;
reg   [0:0] icmp_ln281_1_reg_1126_pp0_iter2_reg;
reg   [0:0] icmp_ln281_1_reg_1126_pp0_iter3_reg;
reg   [0:0] icmp_ln281_1_reg_1126_pp0_iter4_reg;
reg   [0:0] icmp_ln281_1_reg_1126_pp0_iter5_reg;
reg   [0:0] icmp_ln281_1_reg_1126_pp0_iter6_reg;
reg   [0:0] icmp_ln281_1_reg_1126_pp0_iter7_reg;
reg   [61:0] sext_ln281_mid2_v_reg_1130;
reg   [31:0] tmp_reg_1135;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_236_p4;
wire    ap_loop_init;
wire  signed [63:0] sext_ln279_fu_933_p1;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] x_fu_122;
wire   [2:0] select_ln281_fu_644_p3;
reg   [2:0] y_fu_126;
wire   [2:0] select_ln279_1_fu_615_p3;
reg   [5:0] indvar_flatten386_fu_130;
wire   [5:0] select_ln279_2_fu_673_p3;
reg   [31:0] indvar136_fu_134;
wire   [31:0] select_ln275_2_fu_851_p3;
reg   [69:0] indvar_flatten425_fu_138;
wire   [69:0] select_ln275_4_fu_687_p3;
reg   [31:0] indvar_fu_142;
wire   [31:0] select_ln273_3_fu_523_p3;
reg   [101:0] indvar_flatten477_fu_146;
wire   [101:0] select_ln273_5_fu_701_p3;
reg  signed [31:0] f_out_fu_150;
wire   [31:0] select_ln271_4_fu_453_p3;
reg   [102:0] indvar_flatten544_fu_154;
wire   [102:0] add_ln271_fu_353_p2;
wire   [31:0] shl_ln275_fu_314_p2;
wire   [31:0] mul_ln273_fu_309_p2;
wire   [31:0] y_8_cast_fu_326_p1;
wire   [31:0] tmp13_fu_330_p2;
wire   [31:0] sub_ln275_fu_320_p2;
wire  signed [31:0] f_out_5_fu_342_p0;
wire  signed [31:0] f_out_5_fu_342_p2;
wire   [0:0] icmp_ln281_fu_417_p2;
wire   [0:0] xor_ln271_fu_411_p2;
wire   [0:0] icmp_ln279_fu_429_p2;
wire   [0:0] icmp_ln275_1_fu_441_p2;
wire  signed [31:0] select_ln271_4_fu_453_p2;
wire   [31:0] select_ln271_fu_376_p3;
wire   [0:0] or_ln271_fu_384_p2;
wire   [31:0] add_ln273_fu_461_p2;
wire   [31:0] shl_ln275_1_fu_479_p2;
wire   [31:0] sub_ln275_1_fu_485_p2;
wire   [31:0] select_ln271_2_fu_403_p3;
wire   [31:0] select_ln271_1_fu_395_p3;
wire   [0:0] and_ln271_fu_423_p2;
wire   [0:0] xor_ln273_fu_505_p2;
wire   [0:0] and_ln271_1_fu_435_p2;
wire   [0:0] or_ln275_fu_531_p2;
wire   [0:0] or_ln275_4_fu_537_p2;
wire   [0:0] or_ln273_1_fu_473_p2;
wire   [31:0] select_ln273_1_fu_491_p3;
wire   [0:0] xor_ln275_fu_563_p2;
wire   [0:0] or_ln275_2_fu_569_p2;
wire   [0:0] and_ln273_fu_511_p2;
wire   [0:0] or_ln275_3_fu_575_p2;
wire   [2:0] select_ln275_fu_543_p3;
wire   [0:0] or_ln275_1_fu_551_p2;
wire   [2:0] add_ln279_fu_587_p2;
wire   [31:0] y_8_cast_mid1_fu_599_p1;
wire   [31:0] tmp13_mid1_fu_603_p2;
wire   [0:0] or_ln281_fu_632_p2;
wire   [0:0] or_ln281_1_fu_638_p2;
wire   [2:0] add_ln281_fu_626_p2;
wire   [5:0] add_ln279_2_fu_667_p2;
wire   [69:0] add_ln275_1_fu_681_p2;
wire   [101:0] add_ln273_1_fu_695_p2;
wire   [31:0] shl_ln279_fu_752_p2;
wire   [31:0] tmp8_fu_764_p2;
wire   [31:0] tmp14_fu_768_p2;
wire   [31:0] sub_ln279_fu_758_p2;
wire   [31:0] tmp8_mid1512_fu_779_p2;
wire   [31:0] tmp8_mid1451_fu_802_p2;
wire   [31:0] select_ln273_fu_788_p3;
wire   [31:0] add_ln275_fu_811_p2;
wire   [31:0] shl_ln279_1_fu_817_p2;
wire   [31:0] sub_ln279_1_fu_823_p2;
wire   [31:0] select_ln273_2_fu_795_p3;
wire   [31:0] tmp8_mid1403_fu_836_p2;
wire   [31:0] tmp14_mid1405_fu_840_p2;
wire   [31:0] tmp8_mid1_fu_858_p2;
wire   [31:0] tmp14_mid1_fu_862_p2;
wire   [31:0] select_ln275_1_fu_829_p3;
wire   [31:0] tmp14_mid1514_fu_783_p2;
wire   [31:0] empty_fu_773_p2;
wire   [31:0] tmp14_mid1453_fu_806_p2;
wire   [31:0] select_ln271_5_fu_873_p3;
wire   [31:0] p_mid1407_fu_845_p2;
wire   [31:0] select_ln273_4_fu_880_p3;
wire   [31:0] p_mid1380_fu_867_p2;
wire   [31:0] select_ln275_3_fu_887_p3;
wire   [31:0] select_ln279_fu_894_p3;
wire   [33:0] sext_ln281_mid2_v_v_v_v_v_fu_901_p3;
wire   [63:0] zext_ln279_fu_909_p1;
wire   [63:0] add_ln279_1_fu_913_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U329(
    .din0(f_out_fu_150),
    .din1(noy),
    .dout(mul_ln273_fu_309_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U330(
    .din0(f_out_5_fu_342_p2),
    .din1(noy),
    .dout(mul_ln273_1_fu_390_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U331(
    .din0(tmp7_reg_1065),
    .din1(nox),
    .dout(tmp8_fu_764_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U332(
    .din0(mul_ln273_1_reg_1079),
    .din1(nox),
    .dout(tmp8_mid1512_fu_779_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U333(
    .din0(tmp7_mid1449_reg_1095),
    .din1(nox),
    .dout(tmp8_mid1451_fu_802_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U334(
    .din0(tmp7_mid1401_reg_1107),
    .din1(nox),
    .dout(tmp8_mid1403_fu_836_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U335(
    .din0(tmp7_mid1_reg_1121),
    .din1(nox),
    .dout(tmp8_mid1_fu_858_p2)
);

conv_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            f_out_fu_150 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln271_fu_348_p2 == 1'd0))) begin
            f_out_fu_150 <= select_ln271_4_fu_453_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln271_reg_1070 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_232 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_232 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar136_fu_134 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln271_reg_1070 == 1'd0))) begin
            indvar136_fu_134 <= select_ln275_2_fu_851_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten386_fu_130 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln271_fu_348_p2 == 1'd0))) begin
            indvar_flatten386_fu_130 <= select_ln279_2_fu_673_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten425_fu_138 <= 70'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln271_fu_348_p2 == 1'd0))) begin
            indvar_flatten425_fu_138 <= select_ln275_4_fu_687_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten477_fu_146 <= 102'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln271_fu_348_p2 == 1'd0))) begin
            indvar_flatten477_fu_146 <= select_ln273_5_fu_701_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten544_fu_154 <= 103'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln271_fu_348_p2 == 1'd0))) begin
            indvar_flatten544_fu_154 <= add_ln271_fu_353_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_fu_142 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln271_fu_348_p2 == 1'd0))) begin
            indvar_fu_142 <= select_ln273_3_fu_523_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_122 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln271_fu_348_p2 == 1'd0))) begin
            x_fu_122 <= select_ln281_fu_644_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_126 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln271_fu_348_p2 == 1'd0))) begin
            y_fu_126 <= select_ln279_1_fu_615_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln271_fu_348_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln273_1_reg_1100 <= and_ln273_1_fu_517_p2;
        and_ln275_reg_1112 <= and_ln275_fu_581_p2;
        icmp_ln273_reg_1074 <= icmp_ln273_fu_371_p2;
        icmp_ln281_1_reg_1126 <= icmp_ln281_1_fu_652_p2;
        mul_ln273_1_reg_1079 <= mul_ln273_1_fu_390_p2;
        or_ln273_reg_1089 <= or_ln273_fu_467_p2;
        or_ln279_reg_1117 <= or_ln279_fu_593_p2;
        select_ln271_3_reg_1084 <= select_ln271_3_fu_446_p3;
        tmp7_mid1401_reg_1107 <= tmp7_mid1401_fu_557_p2;
        tmp7_mid1449_reg_1095 <= tmp7_mid1449_fu_499_p2;
        tmp7_mid1_reg_1121 <= tmp7_mid1_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln271_reg_1070 <= icmp_ln271_fu_348_p2;
        mul_ln271_1_cast_reg_1055[38 : 0] <= mul_ln271_1_cast_fu_244_p1[38 : 0];
        mul_ln271_2_cast_reg_1060[70 : 0] <= mul_ln271_2_cast_fu_248_p1[70 : 0];
        tmp7_reg_1065 <= tmp7_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        icmp_ln281_1_reg_1126_pp0_iter2_reg <= icmp_ln281_1_reg_1126;
        icmp_ln281_1_reg_1126_pp0_iter3_reg <= icmp_ln281_1_reg_1126_pp0_iter2_reg;
        icmp_ln281_1_reg_1126_pp0_iter4_reg <= icmp_ln281_1_reg_1126_pp0_iter3_reg;
        icmp_ln281_1_reg_1126_pp0_iter5_reg <= icmp_ln281_1_reg_1126_pp0_iter4_reg;
        icmp_ln281_1_reg_1126_pp0_iter6_reg <= icmp_ln281_1_reg_1126_pp0_iter5_reg;
        icmp_ln281_1_reg_1126_pp0_iter7_reg <= icmp_ln281_1_reg_1126_pp0_iter6_reg;
        icmp_ln281_1_reg_1126_pp0_iter8_reg <= icmp_ln281_1_reg_1126_pp0_iter7_reg;
        or_ln279_reg_1117_pp0_iter2_reg <= or_ln279_reg_1117;
        tmp_reg_1135 <= skip_out_fifo_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln271_reg_1070 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sext_ln281_mid2_v_reg_1130 <= {{add_ln279_1_fu_913_p2[63:2]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln271_fu_348_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln271_reg_1070 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln271_reg_1070 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_236_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_236_p4 = first_iter_0_reg_232;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln279_reg_1117_pp0_iter2_reg == 1'd1))) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln281_1_reg_1126_pp0_iter8_reg == 1'd1))) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln279_reg_1117_pp0_iter2_reg == 1'd1))) begin
        m_axi_gmem0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln281_1_reg_1126_pp0_iter8_reg == 1'd1))) begin
        m_axi_gmem0_BREADY = 1'b1;
    end else begin
        m_axi_gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        skip_out_fifo_blk_n = skip_out_fifo_empty_n;
    end else begin
        skip_out_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        skip_out_fifo_read = 1'b1;
    end else begin
        skip_out_fifo_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln271_fu_353_p2 = (indvar_flatten544_fu_154 + 103'd1);

assign add_ln273_1_fu_695_p2 = (indvar_flatten477_fu_146 + 102'd1);

assign add_ln273_fu_461_p2 = (select_ln271_fu_376_p3 + 32'd1);

assign add_ln275_1_fu_681_p2 = (indvar_flatten425_fu_138 + 70'd1);

assign add_ln275_fu_811_p2 = (select_ln273_fu_788_p3 + 32'd1);

assign add_ln279_1_fu_913_p2 = (zext_ln279_fu_909_p1 + act_mem);

assign add_ln279_2_fu_667_p2 = (indvar_flatten386_fu_130 + 6'd1);

assign add_ln279_fu_587_p2 = (select_ln275_fu_543_p3 + 3'd1);

assign add_ln281_fu_626_p2 = (x_fu_122 + 3'd1);

assign and_ln271_1_fu_435_p2 = (xor_ln271_fu_411_p2 & icmp_ln279_fu_429_p2);

assign and_ln271_fu_423_p2 = (xor_ln271_fu_411_p2 & icmp_ln281_fu_417_p2);

assign and_ln273_1_fu_517_p2 = (xor_ln273_fu_505_p2 & and_ln271_1_fu_435_p2);

assign and_ln273_fu_511_p2 = (xor_ln273_fu_505_p2 & and_ln271_fu_423_p2);

assign and_ln275_fu_581_p2 = (or_ln275_3_fu_575_p2 & and_ln273_fu_511_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln281_1_reg_1126_pp0_iter8_reg == 1'd1) & (m_axi_gmem0_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (skip_out_fifo_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln281_1_reg_1126_pp0_iter8_reg == 1'd1) & (m_axi_gmem0_BVALID == 1'b0)) | ((m_axi_gmem0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (skip_out_fifo_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln281_1_reg_1126_pp0_iter8_reg == 1'd1) & (m_axi_gmem0_BVALID == 1'b0)) | ((m_axi_gmem0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (skip_out_fifo_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = ((icmp_ln281_1_reg_1126_pp0_iter8_reg == 1'd1) & (m_axi_gmem0_BVALID == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem0_AWREADY == 1'b0) & (or_ln279_reg_1117_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (skip_out_fifo_empty_n == 1'b0);
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_fu_773_p2 = (tmp14_fu_768_p2 + sub_ln279_fu_758_p2);

assign f_out_5_fu_342_p0 = f_out_fu_150;

assign f_out_5_fu_342_p2 = ($signed(f_out_5_fu_342_p0) + $signed(32'd1));

assign icmp_ln271_fu_348_p2 = ((indvar_flatten544_fu_154 == mul_ln271_3) ? 1'b1 : 1'b0);

assign icmp_ln273_fu_371_p2 = ((indvar_flatten477_fu_146 == mul_ln271_2_cast_reg_1060) ? 1'b1 : 1'b0);

assign icmp_ln275_1_fu_441_p2 = ((indvar_flatten425_fu_138 == mul_ln271_1_cast_reg_1055) ? 1'b1 : 1'b0);

assign icmp_ln279_fu_429_p2 = ((indvar_flatten386_fu_130 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln281_1_fu_652_p2 = ((select_ln281_fu_644_p3 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln281_fu_417_p2 = ((x_fu_122 == 3'd7) ? 1'b1 : 1'b0);

assign m_axi_gmem0_ARADDR = 64'd0;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_ARVALID = 1'b0;

assign m_axi_gmem0_AWADDR = sext_ln279_fu_933_p1;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd7;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_RREADY = 1'b0;

assign m_axi_gmem0_WDATA = tmp_reg_1135;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 4'd15;

assign m_axi_gmem0_WUSER = 1'd0;

assign mul_ln271_1_cast_fu_244_p1 = mul_ln271_1;

assign mul_ln271_2_cast_fu_248_p1 = mul_ln271_2;

assign or_ln271_fu_384_p2 = (icmp_ln273_fu_371_p2 | ap_phi_mux_first_iter_0_phi_fu_236_p4);

assign or_ln273_1_fu_473_p2 = (select_ln271_3_fu_446_p3 | or_ln271_fu_384_p2);

assign or_ln273_fu_467_p2 = (select_ln271_3_fu_446_p3 | icmp_ln273_fu_371_p2);

assign or_ln275_1_fu_551_p2 = (or_ln273_1_fu_473_p2 | and_ln273_1_fu_517_p2);

assign or_ln275_2_fu_569_p2 = (xor_ln275_fu_563_p2 | icmp_ln273_fu_371_p2);

assign or_ln275_3_fu_575_p2 = (select_ln271_3_fu_446_p3 | or_ln275_2_fu_569_p2);

assign or_ln275_4_fu_537_p2 = (or_ln275_fu_531_p2 | icmp_ln273_fu_371_p2);

assign or_ln275_fu_531_p2 = (select_ln271_3_fu_446_p3 | and_ln273_1_fu_517_p2);

assign or_ln279_fu_593_p2 = (or_ln275_1_fu_551_p2 | and_ln275_fu_581_p2);

assign or_ln281_1_fu_638_p2 = (or_ln281_fu_632_p2 | or_ln273_fu_467_p2);

assign or_ln281_fu_632_p2 = (and_ln275_fu_581_p2 | and_ln273_1_fu_517_p2);

assign p_mid1380_fu_867_p2 = (tmp14_mid1_fu_862_p2 + select_ln275_1_fu_829_p3);

assign p_mid1407_fu_845_p2 = (tmp14_mid1405_fu_840_p2 + sub_ln279_1_fu_823_p2);

assign select_ln271_1_fu_395_p3 = ((icmp_ln273_fu_371_p2[0:0] == 1'b1) ? mul_ln273_1_fu_390_p2 : mul_ln273_fu_309_p2);

assign select_ln271_2_fu_403_p3 = ((icmp_ln273_fu_371_p2[0:0] == 1'b1) ? 32'd0 : sub_ln275_fu_320_p2);

assign select_ln271_3_fu_446_p3 = ((icmp_ln273_fu_371_p2[0:0] == 1'b1) ? icmp_ln275 : icmp_ln275_1_fu_441_p2);

assign select_ln271_4_fu_453_p2 = f_out_fu_150;

assign select_ln271_4_fu_453_p3 = ((icmp_ln273_fu_371_p2[0:0] == 1'b1) ? f_out_5_fu_342_p2 : select_ln271_4_fu_453_p2);

assign select_ln271_5_fu_873_p3 = ((icmp_ln273_reg_1074[0:0] == 1'b1) ? tmp14_mid1514_fu_783_p2 : empty_fu_773_p2);

assign select_ln271_fu_376_p3 = ((icmp_ln273_fu_371_p2[0:0] == 1'b1) ? 32'd0 : indvar_fu_142);

assign select_ln273_1_fu_491_p3 = ((select_ln271_3_fu_446_p3[0:0] == 1'b1) ? sub_ln275_1_fu_485_p2 : select_ln271_2_fu_403_p3);

assign select_ln273_2_fu_795_p3 = ((or_ln273_reg_1089[0:0] == 1'b1) ? 32'd0 : sub_ln279_fu_758_p2);

assign select_ln273_3_fu_523_p3 = ((select_ln271_3_fu_446_p3[0:0] == 1'b1) ? add_ln273_fu_461_p2 : select_ln271_fu_376_p3);

assign select_ln273_4_fu_880_p3 = ((select_ln271_3_reg_1084[0:0] == 1'b1) ? tmp14_mid1453_fu_806_p2 : select_ln271_5_fu_873_p3);

assign select_ln273_5_fu_701_p3 = ((icmp_ln273_fu_371_p2[0:0] == 1'b1) ? 102'd1 : add_ln273_1_fu_695_p2);

assign select_ln273_fu_788_p3 = ((or_ln273_reg_1089[0:0] == 1'b1) ? 32'd0 : indvar136_fu_134);

assign select_ln275_1_fu_829_p3 = ((and_ln273_1_reg_1100[0:0] == 1'b1) ? sub_ln279_1_fu_823_p2 : select_ln273_2_fu_795_p3);

assign select_ln275_2_fu_851_p3 = ((and_ln273_1_reg_1100[0:0] == 1'b1) ? add_ln275_fu_811_p2 : select_ln273_fu_788_p3);

assign select_ln275_3_fu_887_p3 = ((and_ln273_1_reg_1100[0:0] == 1'b1) ? p_mid1407_fu_845_p2 : select_ln273_4_fu_880_p3);

assign select_ln275_4_fu_687_p3 = ((or_ln273_fu_467_p2[0:0] == 1'b1) ? 70'd1 : add_ln275_1_fu_681_p2);

assign select_ln275_fu_543_p3 = ((or_ln275_4_fu_537_p2[0:0] == 1'b1) ? 3'd0 : y_fu_126);

assign select_ln279_1_fu_615_p3 = ((and_ln275_fu_581_p2[0:0] == 1'b1) ? add_ln279_fu_587_p2 : select_ln275_fu_543_p3);

assign select_ln279_2_fu_673_p3 = ((or_ln275_4_fu_537_p2[0:0] == 1'b1) ? 6'd1 : add_ln279_2_fu_667_p2);

assign select_ln279_fu_894_p3 = ((and_ln275_reg_1112[0:0] == 1'b1) ? p_mid1380_fu_867_p2 : select_ln275_3_fu_887_p3);

assign select_ln281_fu_644_p3 = ((or_ln281_1_fu_638_p2[0:0] == 1'b1) ? 3'd1 : add_ln281_fu_626_p2);

assign sext_ln279_fu_933_p1 = $signed(sext_ln281_mid2_v_reg_1130);

assign sext_ln281_mid2_v_v_v_v_v_fu_901_p3 = {{select_ln279_fu_894_p3}, {2'd0}};

assign shl_ln275_1_fu_479_p2 = add_ln273_fu_461_p2 << 32'd3;

assign shl_ln275_fu_314_p2 = indvar_fu_142 << 32'd3;

assign shl_ln279_1_fu_817_p2 = add_ln275_fu_811_p2 << 32'd3;

assign shl_ln279_fu_752_p2 = indvar136_fu_134 << 32'd3;

assign sub_ln275_1_fu_485_p2 = (shl_ln275_1_fu_479_p2 - add_ln273_fu_461_p2);

assign sub_ln275_fu_320_p2 = (shl_ln275_fu_314_p2 - indvar_fu_142);

assign sub_ln279_1_fu_823_p2 = (shl_ln279_1_fu_817_p2 - add_ln275_fu_811_p2);

assign sub_ln279_fu_758_p2 = (shl_ln279_fu_752_p2 - indvar136_fu_134);

assign tmp13_fu_330_p2 = (mul_ln273_fu_309_p2 + y_8_cast_fu_326_p1);

assign tmp13_mid1_fu_603_p2 = (select_ln271_1_fu_395_p3 + y_8_cast_mid1_fu_599_p1);

assign tmp14_fu_768_p2 = (base_addr_out + tmp8_fu_764_p2);

assign tmp14_mid1405_fu_840_p2 = (base_addr_out + tmp8_mid1403_fu_836_p2);

assign tmp14_mid1453_fu_806_p2 = (base_addr_out + tmp8_mid1451_fu_802_p2);

assign tmp14_mid1514_fu_783_p2 = (base_addr_out + tmp8_mid1512_fu_779_p2);

assign tmp14_mid1_fu_862_p2 = (base_addr_out + tmp8_mid1_fu_858_p2);

assign tmp7_fu_336_p2 = (tmp13_fu_330_p2 + sub_ln275_fu_320_p2);

assign tmp7_mid1401_fu_557_p2 = (select_ln271_1_fu_395_p3 + select_ln273_1_fu_491_p3);

assign tmp7_mid1449_fu_499_p2 = (select_ln271_1_fu_395_p3 + sub_ln275_1_fu_485_p2);

assign tmp7_mid1_fu_609_p2 = (tmp13_mid1_fu_603_p2 + select_ln273_1_fu_491_p3);

assign xor_ln271_fu_411_p2 = (icmp_ln273_fu_371_p2 ^ 1'd1);

assign xor_ln273_fu_505_p2 = (select_ln271_3_fu_446_p3 ^ 1'd1);

assign xor_ln275_fu_563_p2 = (icmp_ln279_fu_429_p2 ^ 1'd1);

assign y_8_cast_fu_326_p1 = y_fu_126;

assign y_8_cast_mid1_fu_599_p1 = add_ln279_fu_587_p2;

assign zext_ln279_fu_909_p1 = sext_ln281_mid2_v_v_v_v_v_fu_901_p3;

always @ (posedge ap_clk) begin
    mul_ln271_1_cast_reg_1055[69:39] <= 31'b0000000000000000000000000000000;
    mul_ln271_2_cast_reg_1060[101:71] <= 31'b0000000000000000000000000000000;
end

endmodule //conv_kernel_conv_kernel_Pipeline_sotre_output_loop6
