-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_kernel_conv_kernel_Pipeline_skip_conn_loop1_skip_conn_loop3_skip_conn_loop5_skip_conn_l is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bn_out_fifo_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    bn_out_fifo_empty_n : IN STD_LOGIC;
    bn_out_fifo_read : OUT STD_LOGIC;
    skip_out_fifo_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    skip_out_fifo_full_n : IN STD_LOGIC;
    skip_out_fifo_write : OUT STD_LOGIC;
    noy : IN STD_LOGIC_VECTOR (31 downto 0);
    bound213 : IN STD_LOGIC_VECTOR (101 downto 0);
    relu_en : IN STD_LOGIC_VECTOR (0 downto 0);
    bound184 : IN STD_LOGIC_VECTOR (69 downto 0);
    base_addr_add : IN STD_LOGIC_VECTOR (31 downto 0);
    bound172 : IN STD_LOGIC_VECTOR (37 downto 0);
    icmp_ln314 : IN STD_LOGIC_VECTOR (0 downto 0);
    nox : IN STD_LOGIC_VECTOR (31 downto 0);
    skip_en : IN STD_LOGIC_VECTOR (0 downto 0);
    act_mem : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2953_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2953_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2953_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2953_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2953_p_ce : OUT STD_LOGIC;
    grp_fu_2957_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2957_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2957_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_2957_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2957_p_ce : OUT STD_LOGIC );
end;


architecture behav of conv_kernel_conv_kernel_Pipeline_skip_conn_loop1_skip_conn_loop3_skip_conn_loop5_skip_conn_l is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv70_0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv102_0 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv102_1 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv38_1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_const_lv70_1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln364_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal skip_en_read_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op145_readreq_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal icmp_ln364_reg_1033_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op161_read_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln364_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal skip_out_fifo_blk_n : STD_LOGIC;
    signal bn_out_fifo_blk_n : STD_LOGIC;
    signal val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal relu_en_read_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_1033_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln366_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln366_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln364_4_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln364_4_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln366_1_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln366_1_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln372_fu_594_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln372_reg_1058 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln372_1_fu_618_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln372_1_reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_reg_1068 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_read_reg_1080 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_val_fu_848_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_val_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln379_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln374_fu_643_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_fu_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln372_2_fu_626_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten279_fu_142 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln372_3_fu_655_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal x0_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln368_3_fu_776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten299_fu_150 : STD_LOGIC_VECTOR (37 downto 0);
    signal select_ln368_4_fu_669_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal y0_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_3_fu_510_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten329_fu_158 : STD_LOGIC_VECTOR (69 downto 0);
    signal select_ln366_4_fu_683_p3 : STD_LOGIC_VECTOR (69 downto 0);
    signal f_out_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln364_5_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten367_fu_166 : STD_LOGIC_VECTOR (101 downto 0);
    signal add_ln364_fu_355_p2 : STD_LOGIC_VECTOR (101 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_i38_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln372_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_out_7_fu_344_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_out_7_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i38_mid1_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul23_i1621_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln374_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln364_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln372_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln368_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln364_5_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln364_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln364_1_fu_394_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_3_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul23_i1_mid1319_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln364_3_fu_408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln364_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln366_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln364_1_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln368_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln368_3_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul23_i1_mid1293_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_2_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln368_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln368_1_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln366_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln368_2_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_fu_530_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln368_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln372_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln372_1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_8_fu_576_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln372_1_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_mid1_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul23_i1_mid1_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln368_2_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln372_1_fu_649_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln368_1_fu_663_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln366_1_fu_677_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal add_ln379_2_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln364_2_fu_739_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_fu_745_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_5_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln379_4_fu_764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_1_fu_752_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln372_fu_783_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln378_fu_787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln379_3_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln368_1_fu_769_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln379_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln5_fu_802_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln379_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln379_1_fu_814_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_819_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln383_fu_852_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_856_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln383_fu_866_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln383_1_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln383_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln383_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln383_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_3_fu_894_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_4_fu_902_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_265_ce : STD_LOGIC;
    signal grp_fu_269_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_kernel_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_kernel_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_kernel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U313 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => f_out_fu_162,
        din1 => noy,
        dout => mul_i38_fu_329_p2);

    mul_32s_32s_32_1_1_U314 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => f_out_7_fu_344_p2,
        din1 => noy,
        dout => mul_i38_mid1_fu_389_p2);

    mul_32s_32s_32_1_1_U315 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln372_1_reg_1063,
        din1 => nox,
        dout => mul_ln372_fu_783_p2);

    flow_control_loop_pipe_sequential_init_U : component conv_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter11_val_2_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0) and (skip_en_read_reg_985 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter11_val_2_reg_255 <= tmp_fu_844_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter11_val_2_reg_255 <= ap_phi_reg_pp0_iter10_val_2_reg_255;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter15_val_2_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln364_reg_1033_pp0_iter13_reg = ap_const_lv1_0) and (skip_en = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter15_val_2_reg_255 <= grp_fu_2953_p_dout0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter15_val_2_reg_255 <= ap_phi_reg_pp0_iter14_val_2_reg_255;
                end if;
            end if; 
        end if;
    end process;

    f_out_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    f_out_fu_162 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0))) then 
                    f_out_fu_162 <= select_ln364_5_fu_458_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten279_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten279_fu_142 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0))) then 
                    indvar_flatten279_fu_142 <= select_ln372_3_fu_655_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten299_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten299_fu_150 <= ap_const_lv38_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0))) then 
                    indvar_flatten299_fu_150 <= select_ln368_4_fu_669_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten329_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten329_fu_158 <= ap_const_lv70_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0))) then 
                    indvar_flatten329_fu_158 <= select_ln366_4_fu_683_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten367_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten367_fu_166 <= ap_const_lv102_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0))) then 
                    indvar_flatten367_fu_166 <= add_ln364_fu_355_p2;
                end if;
            end if; 
        end if;
    end process;

    x0_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x0_fu_146 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    x0_fu_146 <= select_ln368_3_fu_776_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_134 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0))) then 
                    x_fu_134 <= add_ln374_fu_643_p2;
                end if;
            end if; 
        end if;
    end process;

    y0_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y0_fu_154 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0))) then 
                    y0_fu_154 <= select_ln366_3_fu_510_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_138 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0))) then 
                    y_fu_138 <= select_ln372_2_fu_626_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln364_fu_350_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln366_1_reg_1052 <= and_ln366_1_fu_504_p2;
                icmp_ln366_reg_1037 <= icmp_ln366_fu_376_p2;
                or_ln366_reg_1047 <= or_ln366_fu_472_p2;
                select_ln364_4_reg_1042 <= select_ln364_4_fu_451_p3;
                select_ln372_1_reg_1063 <= select_ln372_1_fu_618_p3;
                select_ln372_reg_1058 <= select_ln372_fu_594_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln364_reg_1033_pp0_iter10_reg <= icmp_ln364_reg_1033_pp0_iter9_reg;
                icmp_ln364_reg_1033_pp0_iter11_reg <= icmp_ln364_reg_1033_pp0_iter10_reg;
                icmp_ln364_reg_1033_pp0_iter12_reg <= icmp_ln364_reg_1033_pp0_iter11_reg;
                icmp_ln364_reg_1033_pp0_iter13_reg <= icmp_ln364_reg_1033_pp0_iter12_reg;
                icmp_ln364_reg_1033_pp0_iter2_reg <= icmp_ln364_reg_1033;
                icmp_ln364_reg_1033_pp0_iter3_reg <= icmp_ln364_reg_1033_pp0_iter2_reg;
                icmp_ln364_reg_1033_pp0_iter4_reg <= icmp_ln364_reg_1033_pp0_iter3_reg;
                icmp_ln364_reg_1033_pp0_iter5_reg <= icmp_ln364_reg_1033_pp0_iter4_reg;
                icmp_ln364_reg_1033_pp0_iter6_reg <= icmp_ln364_reg_1033_pp0_iter5_reg;
                icmp_ln364_reg_1033_pp0_iter7_reg <= icmp_ln364_reg_1033_pp0_iter6_reg;
                icmp_ln364_reg_1033_pp0_iter8_reg <= icmp_ln364_reg_1033_pp0_iter7_reg;
                icmp_ln364_reg_1033_pp0_iter9_reg <= icmp_ln364_reg_1033_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln364_reg_1033 <= icmp_ln364_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_val_2_reg_255 <= ap_phi_reg_pp0_iter9_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_val_2_reg_255 <= ap_phi_reg_pp0_iter11_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_val_2_reg_255 <= ap_phi_reg_pp0_iter12_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_val_2_reg_255 <= ap_phi_reg_pp0_iter13_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_val_2_reg_255 <= ap_phi_reg_pp0_iter0_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_val_2_reg_255 <= ap_phi_reg_pp0_iter1_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_val_2_reg_255 <= ap_phi_reg_pp0_iter2_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_val_2_reg_255 <= ap_phi_reg_pp0_iter3_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_val_2_reg_255 <= ap_phi_reg_pp0_iter4_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_val_2_reg_255 <= ap_phi_reg_pp0_iter5_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_val_2_reg_255 <= ap_phi_reg_pp0_iter6_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_val_2_reg_255 <= ap_phi_reg_pp0_iter7_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_val_2_reg_255 <= ap_phi_reg_pp0_iter8_val_2_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op161_read_state11 = ap_const_boolean_1))) then
                gmem0_addr_read_reg_1080 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (skip_en = ap_const_lv1_1) and (icmp_ln364_reg_1033 = ap_const_lv1_0))) then
                gmem0_addr_reg_1068 <= sext_ln379_fu_829_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0))) then
                tmp_reg_1074 <= tmp_fu_844_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                val_2_reg_255 <= ap_phi_reg_pp0_iter15_val_2_reg_255;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln364_fu_355_p2 <= std_logic_vector(unsigned(indvar_flatten367_fu_166) + unsigned(ap_const_lv102_1));
    add_ln366_1_fu_677_p2 <= std_logic_vector(unsigned(indvar_flatten329_fu_158) + unsigned(ap_const_lv70_1));
    add_ln368_1_fu_663_p2 <= std_logic_vector(unsigned(indvar_flatten299_fu_150) + unsigned(ap_const_lv38_1));
    add_ln372_1_fu_649_p2 <= std_logic_vector(unsigned(indvar_flatten279_fu_142) + unsigned(ap_const_lv6_1));
    add_ln374_fu_643_p2 <= std_logic_vector(unsigned(select_ln372_fu_594_p3) + unsigned(ap_const_lv3_1));
    add_ln379_1_fu_814_p2 <= std_logic_vector(unsigned(zext_ln379_fu_810_p1) + unsigned(act_mem));
    add_ln379_2_fu_734_p2 <= std_logic_vector(unsigned(x0_fu_146) + unsigned(base_addr_add));
    add_ln379_3_fu_790_p2 <= std_logic_vector(unsigned(mul_ln372_fu_783_p2) + unsigned(zext_ln378_fu_787_p1));
    add_ln379_4_fu_764_p2 <= std_logic_vector(unsigned(x0_5_fu_758_p2) + unsigned(base_addr_add));
    add_ln379_fu_796_p2 <= std_logic_vector(unsigned(add_ln379_3_fu_790_p2) + unsigned(select_ln368_1_fu_769_p3));
    add_val_fu_848_p1 <= gmem0_addr_read_reg_1080;
    and_ln364_1_fu_440_p2 <= (xor_ln364_fu_416_p2 and icmp_ln372_fu_434_p2);
    and_ln364_fu_428_p2 <= (xor_ln364_fu_416_p2 and icmp_ln374_fu_422_p2);
    and_ln366_1_fu_504_p2 <= (xor_ln366_fu_492_p2 and and_ln364_1_fu_440_p2);
    and_ln366_fu_498_p2 <= (xor_ln366_fu_492_p2 and and_ln364_fu_428_p2);
    and_ln368_fu_570_p2 <= (or_ln368_2_fu_564_p2 and and_ln366_fu_498_p2);
    and_ln383_fu_888_p2 <= (or_ln383_fu_882_p2 and grp_fu_2957_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter16, m_axi_gmem0_RVALID, bn_out_fifo_empty_n, icmp_ln364_reg_1033_pp0_iter9_reg, ap_predicate_op161_read_state11, skip_out_fifo_full_n)
    begin
                ap_block_pp0_stage0_00001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (skip_out_fifo_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((ap_predicate_op161_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0) and (bn_out_fifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter16, m_axi_gmem0_RVALID, bn_out_fifo_empty_n, icmp_ln364_reg_1033_pp0_iter9_reg, ap_predicate_op161_read_state11, skip_out_fifo_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (skip_out_fifo_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((ap_predicate_op161_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0) and (bn_out_fifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter16, m_axi_gmem0_RVALID, ap_block_state4_io, bn_out_fifo_empty_n, icmp_ln364_reg_1033_pp0_iter9_reg, ap_predicate_op161_read_state11, skip_out_fifo_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (skip_out_fifo_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((ap_predicate_op161_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0) and (bn_out_fifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter16, m_axi_gmem0_RVALID, ap_block_state4_io, bn_out_fifo_empty_n, icmp_ln364_reg_1033_pp0_iter9_reg, ap_predicate_op161_read_state11, skip_out_fifo_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (skip_out_fifo_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((ap_predicate_op161_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0) and (bn_out_fifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter10_assign_proc : process(m_axi_gmem0_RVALID, bn_out_fifo_empty_n, icmp_ln364_reg_1033_pp0_iter9_reg, ap_predicate_op161_read_state11)
    begin
                ap_block_state11_pp0_stage0_iter10 <= (((ap_predicate_op161_read_state11 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0) and (bn_out_fifo_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter16_assign_proc : process(skip_out_fifo_full_n)
    begin
                ap_block_state17_pp0_stage0_iter16 <= (skip_out_fifo_full_n = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem0_ARREADY, ap_predicate_op145_readreq_state4)
    begin
                ap_block_state4_io <= ((ap_predicate_op145_readreq_state4 = ap_const_boolean_1) and (m_axi_gmem0_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln364_fu_350_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln364_fu_350_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_val_2_reg_255 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op145_readreq_state4_assign_proc : process(icmp_ln364_reg_1033_pp0_iter2_reg, skip_en)
    begin
                ap_predicate_op145_readreq_state4 <= ((skip_en = ap_const_lv1_1) and (icmp_ln364_reg_1033_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op161_read_state11_assign_proc : process(icmp_ln364_reg_1033_pp0_iter9_reg, skip_en)
    begin
                ap_predicate_op161_read_state11 <= ((icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0) and (skip_en = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln383_fu_852_p1 <= val_2_reg_255;

    bn_out_fifo_blk_n_assign_proc : process(ap_enable_reg_pp0_iter10, bn_out_fifo_empty_n, icmp_ln364_reg_1033_pp0_iter9_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0))) then 
            bn_out_fifo_blk_n <= bn_out_fifo_empty_n;
        else 
            bn_out_fifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bn_out_fifo_read_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln364_reg_1033_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln364_reg_1033_pp0_iter9_reg = ap_const_lv1_0))) then 
            bn_out_fifo_read <= ap_const_logic_1;
        else 
            bn_out_fifo_read <= ap_const_logic_0;
        end if; 
    end process;

    f_out_7_fu_344_p0 <= f_out_fu_162;
    f_out_7_fu_344_p2 <= std_logic_vector(signed(f_out_7_fu_344_p0) + signed(ap_const_lv32_1));

    gmem0_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem0_ARREADY, ap_predicate_op145_readreq_state4, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op145_readreq_state4 = ap_const_boolean_1))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_gmem0_RVALID, ap_predicate_op161_read_state11, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op161_read_state11 = ap_const_boolean_1))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_265_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_265_ce <= ap_const_logic_1;
        else 
            grp_fu_265_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_269_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_269_ce <= ap_const_logic_1;
        else 
            grp_fu_269_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2953_p_ce <= grp_fu_265_ce;
    grp_fu_2953_p_din0 <= tmp_reg_1074;
    grp_fu_2953_p_din1 <= add_val_fu_848_p1;
    grp_fu_2953_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2957_p_ce <= grp_fu_269_ce;
    grp_fu_2957_p_din0 <= ap_phi_reg_pp0_iter15_val_2_reg_255;
    grp_fu_2957_p_din1 <= ap_const_lv32_0;
    grp_fu_2957_p_opcode <= ap_const_lv5_2;
    icmp_ln364_fu_350_p2 <= "1" when (indvar_flatten367_fu_166 = bound213) else "0";
    icmp_ln366_fu_376_p2 <= "1" when (indvar_flatten329_fu_158 = bound184) else "0";
    icmp_ln368_fu_446_p2 <= "1" when (indvar_flatten299_fu_150 = bound172) else "0";
    icmp_ln372_fu_434_p2 <= "1" when (indvar_flatten279_fu_142 = ap_const_lv6_31) else "0";
    icmp_ln374_fu_422_p2 <= "1" when (x_fu_134 = ap_const_lv3_7) else "0";
    icmp_ln383_1_fu_876_p2 <= "1" when (trunc_ln383_fu_866_p1 = ap_const_lv23_0) else "0";
    icmp_ln383_fu_870_p2 <= "0" when (tmp_s_fu_856_p4 = ap_const_lv8_FF) else "1";
    m_axi_gmem0_ARADDR <= gmem0_addr_reg_1068;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_1;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op145_readreq_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op145_readreq_state4 = ap_const_boolean_1))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, ap_predicate_op161_read_state11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op161_read_state11 = ap_const_boolean_1))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    mul23_i1621_fu_402_p2 <= std_logic_vector(unsigned(tmp10_fu_338_p2) + unsigned(y0_fu_154));
    mul23_i1_mid1293_fu_538_p2 <= std_logic_vector(unsigned(select_ln364_1_fu_394_p3) + unsigned(select_ln366_3_fu_510_p3));
    mul23_i1_mid1319_fu_478_p2 <= std_logic_vector(unsigned(select_ln364_1_fu_394_p3) + unsigned(y0_3_fu_466_p2));
    mul23_i1_mid1_fu_612_p2 <= std_logic_vector(unsigned(tmp10_mid1_fu_606_p2) + unsigned(select_ln366_3_fu_510_p3));
    or_ln366_fu_472_p2 <= (select_ln364_4_fu_451_p3 or icmp_ln366_fu_376_p2);
    or_ln368_1_fu_558_p2 <= (xor_ln368_fu_552_p2 or icmp_ln366_fu_376_p2);
    or_ln368_2_fu_564_p2 <= (select_ln364_4_fu_451_p3 or or_ln368_1_fu_558_p2);
    or_ln368_3_fu_524_p2 <= (or_ln368_fu_518_p2 or icmp_ln366_fu_376_p2);
    or_ln368_fu_518_p2 <= (select_ln364_4_fu_451_p3 or and_ln366_1_fu_504_p2);
    or_ln372_1_fu_588_p2 <= (or_ln372_fu_582_p2 or or_ln366_fu_472_p2);
    or_ln372_fu_582_p2 <= (and_ln368_fu_570_p2 or and_ln366_1_fu_504_p2);
    or_ln383_fu_882_p2 <= (icmp_ln383_fu_870_p2 or icmp_ln383_1_fu_876_p2);
    relu_en_read_reg_1017 <= relu_en;
    select_ln364_1_fu_394_p3 <= 
        mul_i38_mid1_fu_389_p2 when (icmp_ln366_fu_376_p2(0) = '1') else 
        mul_i38_fu_329_p2;
    select_ln364_2_fu_739_p3 <= 
        base_addr_add when (icmp_ln366_reg_1037(0) = '1') else 
        add_ln379_2_fu_734_p2;
    select_ln364_3_fu_408_p3 <= 
        mul_i38_mid1_fu_389_p2 when (icmp_ln366_fu_376_p2(0) = '1') else 
        mul23_i1621_fu_402_p2;
    select_ln364_4_fu_451_p3 <= 
        icmp_ln314 when (icmp_ln366_fu_376_p2(0) = '1') else 
        icmp_ln368_fu_446_p2;
    select_ln364_5_fu_458_p2 <= f_out_fu_162;
    select_ln364_5_fu_458_p3 <= 
        f_out_7_fu_344_p2 when (icmp_ln366_fu_376_p2(0) = '1') else 
        select_ln364_5_fu_458_p2;
    select_ln364_fu_381_p3 <= 
        ap_const_lv32_0 when (icmp_ln366_fu_376_p2(0) = '1') else 
        y0_fu_154;
    select_ln366_1_fu_752_p3 <= 
        base_addr_add when (select_ln364_4_reg_1042(0) = '1') else 
        select_ln364_2_fu_739_p3;
    select_ln366_2_fu_484_p3 <= 
        mul23_i1_mid1319_fu_478_p2 when (select_ln364_4_fu_451_p3(0) = '1') else 
        select_ln364_3_fu_408_p3;
    select_ln366_3_fu_510_p3 <= 
        y0_3_fu_466_p2 when (select_ln364_4_fu_451_p3(0) = '1') else 
        select_ln364_fu_381_p3;
    select_ln366_4_fu_683_p3 <= 
        ap_const_lv70_1 when (icmp_ln366_fu_376_p2(0) = '1') else 
        add_ln366_1_fu_677_p2;
    select_ln366_fu_745_p3 <= 
        ap_const_lv32_0 when (or_ln366_reg_1047(0) = '1') else 
        x0_fu_146;
    select_ln368_1_fu_769_p3 <= 
        add_ln379_4_fu_764_p2 when (and_ln366_1_reg_1052(0) = '1') else 
        select_ln366_1_fu_752_p3;
    select_ln368_2_fu_544_p3 <= 
        mul23_i1_mid1293_fu_538_p2 when (and_ln366_1_fu_504_p2(0) = '1') else 
        select_ln366_2_fu_484_p3;
    select_ln368_3_fu_776_p3 <= 
        x0_5_fu_758_p2 when (and_ln366_1_reg_1052(0) = '1') else 
        select_ln366_fu_745_p3;
    select_ln368_4_fu_669_p3 <= 
        ap_const_lv38_1 when (or_ln366_fu_472_p2(0) = '1') else 
        add_ln368_1_fu_663_p2;
    select_ln368_fu_530_p3 <= 
        ap_const_lv3_0 when (or_ln368_3_fu_524_p2(0) = '1') else 
        y_fu_138;
    select_ln372_1_fu_618_p3 <= 
        mul23_i1_mid1_fu_612_p2 when (and_ln368_fu_570_p2(0) = '1') else 
        select_ln368_2_fu_544_p3;
    select_ln372_2_fu_626_p3 <= 
        y_8_fu_576_p2 when (and_ln368_fu_570_p2(0) = '1') else 
        select_ln368_fu_530_p3;
    select_ln372_3_fu_655_p3 <= 
        ap_const_lv6_1 when (or_ln368_3_fu_524_p2(0) = '1') else 
        add_ln372_1_fu_649_p2;
    select_ln372_fu_594_p3 <= 
        ap_const_lv3_0 when (or_ln372_1_fu_588_p2(0) = '1') else 
        x_fu_134;
        sext_ln379_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_819_p4),64));

    shl_ln5_fu_802_p3 <= (add_ln379_fu_796_p2 & ap_const_lv2_0);
    skip_en_read_reg_985 <= skip_en;

    skip_out_fifo_blk_n_assign_proc : process(ap_enable_reg_pp0_iter16, skip_out_fifo_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            skip_out_fifo_blk_n <= skip_out_fifo_full_n;
        else 
            skip_out_fifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    skip_out_fifo_din <= val_4_fu_902_p3;

    skip_out_fifo_write_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            skip_out_fifo_write <= ap_const_logic_1;
        else 
            skip_out_fifo_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_fu_338_p2 <= std_logic_vector(unsigned(mul_i38_fu_329_p2) + unsigned(zext_ln372_fu_334_p1));
    tmp10_mid1_fu_606_p2 <= std_logic_vector(unsigned(select_ln364_1_fu_394_p3) + unsigned(zext_ln372_1_fu_602_p1));
    tmp_fu_844_p1 <= bn_out_fifo_dout;
    tmp_s_fu_856_p4 <= bitcast_ln383_fu_852_p1(30 downto 23);
    trunc_ln383_fu_866_p1 <= bitcast_ln383_fu_852_p1(23 - 1 downto 0);
    trunc_ln8_fu_819_p4 <= add_ln379_1_fu_814_p2(63 downto 2);
    val_3_fu_894_p3 <= 
        val_2_reg_255 when (and_ln383_fu_888_p2(0) = '1') else 
        ap_const_lv32_0;
    val_4_fu_902_p3 <= 
        val_3_fu_894_p3 when (relu_en(0) = '1') else 
        val_2_reg_255;
    x0_5_fu_758_p2 <= std_logic_vector(unsigned(select_ln366_fu_745_p3) + unsigned(ap_const_lv32_7));
    xor_ln364_fu_416_p2 <= (icmp_ln366_fu_376_p2 xor ap_const_lv1_1);
    xor_ln366_fu_492_p2 <= (select_ln364_4_fu_451_p3 xor ap_const_lv1_1);
    xor_ln368_fu_552_p2 <= (icmp_ln372_fu_434_p2 xor ap_const_lv1_1);
    y0_3_fu_466_p2 <= std_logic_vector(unsigned(select_ln364_fu_381_p3) + unsigned(ap_const_lv32_7));
    y_8_fu_576_p2 <= std_logic_vector(unsigned(select_ln368_fu_530_p3) + unsigned(ap_const_lv3_1));
    zext_ln372_1_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_8_fu_576_p2),32));
    zext_ln372_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_138),32));
    zext_ln378_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln372_reg_1058),32));
    zext_ln379_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_802_p3),64));
end behav;
