// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_kernel_load_input_Pipeline_load_input_loop6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        load_input_fifo5_din,
        load_input_fifo5_full_n,
        load_input_fifo5_write,
        noy,
        nox,
        base_addr,
        mul_ln46_4,
        mul_ln46_3,
        mul_ln46_1,
        icmp_ln50,
        act_mem
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [31:0] m_axi_gmem0_WDATA;
output  [3:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [31:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
output  [31:0] load_input_fifo5_din;
input   load_input_fifo5_full_n;
output   load_input_fifo5_write;
input  [31:0] noy;
input  [31:0] nox;
input  [31:0] base_addr;
input  [101:0] mul_ln46_4;
input  [69:0] mul_ln46_3;
input  [37:0] mul_ln46_1;
input  [0:0] icmp_ln50;
input  [63:0] act_mem;

reg ap_idle;
reg m_axi_gmem0_ARVALID;
reg m_axi_gmem0_RREADY;
reg load_input_fifo5_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] or_ln54_reg_1050;
reg   [0:0] or_ln54_reg_1050_pp0_iter2_reg;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg   [0:0] icmp_ln46_reg_1005;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter9_reg;
reg    ap_block_state11_pp0_stage0_iter10;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter10_reg;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln46_fu_327_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_AR;
reg    load_input_fifo5_blk_n;
reg   [0:0] first_iter_0_reg_219;
reg    ap_block_pp0_stage0_11001;
wire  signed [31:0] tmp4_fu_315_p2;
reg  signed [31:0] tmp4_reg_1000;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter2_reg;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter3_reg;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter4_reg;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter5_reg;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter6_reg;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter7_reg;
reg   [0:0] icmp_ln46_reg_1005_pp0_iter8_reg;
wire   [0:0] icmp_ln48_fu_350_p2;
reg   [0:0] icmp_ln48_reg_1009;
wire  signed [31:0] mul_ln48_1_fu_369_p2;
reg  signed [31:0] mul_ln48_1_reg_1014;
wire   [0:0] select_ln46_3_fu_425_p3;
reg   [0:0] select_ln46_3_reg_1019;
wire   [0:0] or_ln48_fu_446_p2;
reg   [0:0] or_ln48_reg_1024;
wire  signed [31:0] tmp4_mid165_fu_478_p2;
reg  signed [31:0] tmp4_mid165_reg_1029;
wire   [0:0] and_ln48_1_fu_496_p2;
reg   [0:0] and_ln48_1_reg_1034;
wire  signed [31:0] tmp4_mid122_fu_536_p2;
reg  signed [31:0] tmp4_mid122_reg_1040;
wire   [0:0] and_ln50_fu_560_p2;
reg   [0:0] and_ln50_reg_1045;
wire   [0:0] or_ln54_fu_572_p2;
wire  signed [31:0] tmp4_mid1_fu_588_p2;
reg  signed [31:0] tmp4_mid1_reg_1054;
reg   [61:0] sext_ln56_mid2_v_reg_1059;
reg   [31:0] gmem0_addr_10_read_reg_1074;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_223_p4;
wire    ap_loop_init;
wire  signed [63:0] sext_ln54_fu_868_p1;
reg   [2:0] x_fu_116;
wire   [2:0] select_ln56_fu_632_p3;
reg   [2:0] y_fu_120;
wire   [2:0] select_ln54_1_fu_594_p3;
reg   [5:0] indvar_flatten_fu_124;
wire   [5:0] select_ln54_2_fu_646_p3;
reg   [31:0] x0_fu_128;
wire   [31:0] select_ln50_1_fu_780_p3;
reg   [37:0] indvar_flatten46_fu_132;
wire   [37:0] select_ln50_3_fu_660_p3;
reg   [31:0] indvar_fu_136;
wire   [31:0] select_ln48_2_fu_502_p3;
reg   [69:0] indvar_flatten93_fu_140;
wire   [69:0] select_ln48_4_fu_674_p3;
reg  signed [31:0] f_out_fu_144;
wire   [31:0] select_ln46_4_fu_432_p3;
reg   [101:0] indvar_flatten153_fu_148;
wire   [101:0] add_ln46_fu_332_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] shl_ln50_fu_293_p2;
wire   [31:0] mul_ln48_fu_288_p2;
wire   [31:0] y_cast_fu_305_p1;
wire   [31:0] tmp1_fu_309_p2;
wire   [31:0] sub_ln50_fu_299_p2;
wire  signed [31:0] f_out_2_fu_321_p0;
wire  signed [31:0] f_out_2_fu_321_p2;
wire   [0:0] icmp_ln56_fu_396_p2;
wire   [0:0] xor_ln46_fu_390_p2;
wire   [0:0] icmp_ln54_fu_408_p2;
wire   [0:0] icmp_ln50_1_fu_420_p2;
wire  signed [31:0] select_ln46_4_fu_432_p2;
wire   [31:0] select_ln46_fu_355_p3;
wire   [0:0] or_ln46_fu_363_p2;
wire   [31:0] add_ln48_fu_440_p2;
wire   [31:0] shl_ln50_1_fu_458_p2;
wire   [31:0] sub_ln50_1_fu_464_p2;
wire   [31:0] select_ln46_2_fu_382_p3;
wire   [31:0] select_ln46_1_fu_374_p3;
wire   [0:0] and_ln46_fu_402_p2;
wire   [0:0] xor_ln48_fu_484_p2;
wire   [0:0] and_ln46_1_fu_414_p2;
wire   [0:0] or_ln50_fu_510_p2;
wire   [0:0] or_ln50_4_fu_516_p2;
wire   [0:0] or_ln48_1_fu_452_p2;
wire   [31:0] select_ln48_1_fu_470_p3;
wire   [0:0] xor_ln50_fu_542_p2;
wire   [0:0] or_ln50_2_fu_548_p2;
wire   [0:0] and_ln48_fu_490_p2;
wire   [0:0] or_ln50_3_fu_554_p2;
wire   [2:0] select_ln50_fu_522_p3;
wire   [0:0] or_ln50_1_fu_530_p2;
wire   [2:0] add_ln54_fu_566_p2;
wire   [31:0] y_cast_mid1_fu_578_p1;
wire   [31:0] tmp1_mid1_fu_582_p2;
wire   [0:0] or_ln56_fu_620_p2;
wire   [0:0] or_ln56_1_fu_626_p2;
wire   [2:0] add_ln56_fu_614_p2;
wire   [5:0] add_ln54_2_fu_640_p2;
wire   [37:0] add_ln50_1_fu_654_p2;
wire   [69:0] add_ln48_1_fu_668_p2;
wire   [31:0] tmp5_fu_722_p2;
wire   [31:0] tmp5_mid1123_fu_734_p2;
wire   [31:0] tmp5_mid167_fu_750_p2;
wire   [31:0] select_ln48_fu_743_p3;
wire   [31:0] tmp5_mid124_fu_765_p2;
wire   [31:0] tmp2_mid126_fu_769_p2;
wire   [31:0] x0_2_fu_759_p2;
wire   [31:0] tmp5_mid1_fu_787_p2;
wire   [31:0] tmp2_mid1_fu_791_p2;
wire   [31:0] tmp2_fu_726_p2;
wire   [31:0] tmp2_mid1125_fu_738_p2;
wire   [31:0] empty_53_fu_802_p2;
wire   [31:0] tmp2_mid169_fu_754_p2;
wire   [31:0] select_ln46_5_fu_808_p3;
wire   [31:0] p_mid128_fu_774_p2;
wire   [31:0] select_ln48_3_fu_815_p3;
wire   [31:0] p_mid1_fu_796_p2;
wire   [31:0] select_ln50_2_fu_822_p3;
wire   [31:0] select_ln54_fu_829_p3;
wire   [33:0] sext_ln56_mid2_v_v_v_v_v_fu_836_p3;
wire   [63:0] zext_ln54_fu_844_p1;
wire   [63:0] add_ln54_1_fu_848_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U31(
    .din0(f_out_fu_144),
    .din1(noy),
    .dout(mul_ln48_fu_288_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U32(
    .din0(f_out_2_fu_321_p2),
    .din1(noy),
    .dout(mul_ln48_1_fu_369_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U33(
    .din0(tmp4_reg_1000),
    .din1(nox),
    .dout(tmp5_fu_722_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U34(
    .din0(mul_ln48_1_reg_1014),
    .din1(nox),
    .dout(tmp5_mid1123_fu_734_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U35(
    .din0(tmp4_mid165_reg_1029),
    .din1(nox),
    .dout(tmp5_mid167_fu_750_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U36(
    .din0(tmp4_mid122_reg_1040),
    .din1(nox),
    .dout(tmp5_mid124_fu_765_p2)
);

conv_kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U37(
    .din0(tmp4_mid1_reg_1054),
    .din1(nox),
    .dout(tmp5_mid1_fu_787_p2)
);

conv_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            f_out_fu_144 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_fu_327_p2 == 1'd0))) begin
            f_out_fu_144 <= select_ln46_4_fu_432_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_1005 == 1'd0))) begin
        first_iter_0_reg_219 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_219 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten153_fu_148 <= 102'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_fu_327_p2 == 1'd0))) begin
            indvar_flatten153_fu_148 <= add_ln46_fu_332_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten46_fu_132 <= 38'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_fu_327_p2 == 1'd0))) begin
            indvar_flatten46_fu_132 <= select_ln50_3_fu_660_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten93_fu_140 <= 70'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_fu_327_p2 == 1'd0))) begin
            indvar_flatten93_fu_140 <= select_ln48_4_fu_674_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_124 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_fu_327_p2 == 1'd0))) begin
            indvar_flatten_fu_124 <= select_ln54_2_fu_646_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_fu_136 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_fu_327_p2 == 1'd0))) begin
            indvar_fu_136 <= select_ln48_2_fu_502_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x0_fu_128 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln46_reg_1005 == 1'd0))) begin
            x0_fu_128 <= select_ln50_1_fu_780_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_116 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_fu_327_p2 == 1'd0))) begin
            x_fu_116 <= select_ln56_fu_632_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_120 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln46_fu_327_p2 == 1'd0))) begin
            y_fu_120 <= select_ln54_1_fu_594_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_fu_327_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln48_1_reg_1034 <= and_ln48_1_fu_496_p2;
        and_ln50_reg_1045 <= and_ln50_fu_560_p2;
        icmp_ln48_reg_1009 <= icmp_ln48_fu_350_p2;
        mul_ln48_1_reg_1014 <= mul_ln48_1_fu_369_p2;
        or_ln48_reg_1024 <= or_ln48_fu_446_p2;
        or_ln54_reg_1050 <= or_ln54_fu_572_p2;
        select_ln46_3_reg_1019 <= select_ln46_3_fu_425_p3;
        tmp4_mid122_reg_1040 <= tmp4_mid122_fu_536_p2;
        tmp4_mid165_reg_1029 <= tmp4_mid165_fu_478_p2;
        tmp4_mid1_reg_1054 <= tmp4_mid1_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln46_reg_1005_pp0_iter10_reg <= icmp_ln46_reg_1005_pp0_iter9_reg;
        icmp_ln46_reg_1005_pp0_iter2_reg <= icmp_ln46_reg_1005;
        icmp_ln46_reg_1005_pp0_iter3_reg <= icmp_ln46_reg_1005_pp0_iter2_reg;
        icmp_ln46_reg_1005_pp0_iter4_reg <= icmp_ln46_reg_1005_pp0_iter3_reg;
        icmp_ln46_reg_1005_pp0_iter5_reg <= icmp_ln46_reg_1005_pp0_iter4_reg;
        icmp_ln46_reg_1005_pp0_iter6_reg <= icmp_ln46_reg_1005_pp0_iter5_reg;
        icmp_ln46_reg_1005_pp0_iter7_reg <= icmp_ln46_reg_1005_pp0_iter6_reg;
        icmp_ln46_reg_1005_pp0_iter8_reg <= icmp_ln46_reg_1005_pp0_iter7_reg;
        icmp_ln46_reg_1005_pp0_iter9_reg <= icmp_ln46_reg_1005_pp0_iter8_reg;
        or_ln54_reg_1050_pp0_iter2_reg <= or_ln54_reg_1050;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln46_reg_1005 <= icmp_ln46_fu_327_p2;
        tmp4_reg_1000 <= tmp4_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_1005_pp0_iter9_reg == 1'd0))) begin
        gmem0_addr_10_read_reg_1074 <= m_axi_gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_1005 == 1'd0))) begin
        sext_ln56_mid2_v_reg_1059 <= {{add_ln54_1_fu_848_p2[63:2]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln46_fu_327_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln46_reg_1005 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln46_reg_1005 == 1'd0))) begin
        ap_phi_mux_first_iter_0_phi_fu_223_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_223_p4 = first_iter_0_reg_219;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln54_reg_1050_pp0_iter2_reg == 1'd1))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln46_reg_1005_pp0_iter9_reg == 1'd0))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln46_reg_1005_pp0_iter10_reg == 1'd0))) begin
        load_input_fifo5_blk_n = load_input_fifo5_full_n;
    end else begin
        load_input_fifo5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_1005_pp0_iter10_reg == 1'd0))) begin
        load_input_fifo5_write = 1'b1;
    end else begin
        load_input_fifo5_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln54_reg_1050_pp0_iter2_reg == 1'd1))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_1005_pp0_iter9_reg == 1'd0))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_332_p2 = (indvar_flatten153_fu_148 + 102'd1);

assign add_ln48_1_fu_668_p2 = (indvar_flatten93_fu_140 + 70'd1);

assign add_ln48_fu_440_p2 = (select_ln46_fu_355_p3 + 32'd1);

assign add_ln50_1_fu_654_p2 = (indvar_flatten46_fu_132 + 38'd1);

assign add_ln54_1_fu_848_p2 = (zext_ln54_fu_844_p1 + act_mem);

assign add_ln54_2_fu_640_p2 = (indvar_flatten_fu_124 + 6'd1);

assign add_ln54_fu_566_p2 = (select_ln50_fu_522_p3 + 3'd1);

assign add_ln56_fu_614_p2 = (x_fu_116 + 3'd1);

assign and_ln46_1_fu_414_p2 = (xor_ln46_fu_390_p2 & icmp_ln54_fu_408_p2);

assign and_ln46_fu_402_p2 = (xor_ln46_fu_390_p2 & icmp_ln56_fu_396_p2);

assign and_ln48_1_fu_496_p2 = (xor_ln48_fu_484_p2 & and_ln46_1_fu_414_p2);

assign and_ln48_fu_490_p2 = (xor_ln48_fu_484_p2 & and_ln46_fu_402_p2);

assign and_ln50_fu_560_p2 = (or_ln50_3_fu_554_p2 & and_ln48_fu_490_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln46_reg_1005_pp0_iter10_reg == 1'd0) & (load_input_fifo5_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln46_reg_1005_pp0_iter9_reg == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln46_reg_1005_pp0_iter10_reg == 1'd0) & (load_input_fifo5_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln46_reg_1005_pp0_iter9_reg == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln46_reg_1005_pp0_iter10_reg == 1'd0) & (load_input_fifo5_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln46_reg_1005_pp0_iter9_reg == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((icmp_ln46_reg_1005_pp0_iter9_reg == 1'd0) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((icmp_ln46_reg_1005_pp0_iter10_reg == 1'd0) & (load_input_fifo5_full_n == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem0_ARREADY == 1'b0) & (or_ln54_reg_1050_pp0_iter2_reg == 1'd1));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_53_fu_802_p2 = (tmp2_fu_726_p2 + x0_fu_128);

assign f_out_2_fu_321_p0 = f_out_fu_144;

assign f_out_2_fu_321_p2 = ($signed(f_out_2_fu_321_p0) + $signed(32'd1));

assign icmp_ln46_fu_327_p2 = ((indvar_flatten153_fu_148 == mul_ln46_4) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_350_p2 = ((indvar_flatten93_fu_140 == mul_ln46_3) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_420_p2 = ((indvar_flatten46_fu_132 == mul_ln46_1) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_408_p2 = ((indvar_flatten_fu_124 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_396_p2 = ((x_fu_116 == 3'd7) ? 1'b1 : 1'b0);

assign load_input_fifo5_din = gmem0_addr_10_read_reg_1074;

assign m_axi_gmem0_ARADDR = sext_ln54_fu_868_p1;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd7;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 32'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 4'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign or_ln46_fu_363_p2 = (icmp_ln48_fu_350_p2 | ap_phi_mux_first_iter_0_phi_fu_223_p4);

assign or_ln48_1_fu_452_p2 = (select_ln46_3_fu_425_p3 | or_ln46_fu_363_p2);

assign or_ln48_fu_446_p2 = (select_ln46_3_fu_425_p3 | icmp_ln48_fu_350_p2);

assign or_ln50_1_fu_530_p2 = (or_ln48_1_fu_452_p2 | and_ln48_1_fu_496_p2);

assign or_ln50_2_fu_548_p2 = (xor_ln50_fu_542_p2 | icmp_ln48_fu_350_p2);

assign or_ln50_3_fu_554_p2 = (select_ln46_3_fu_425_p3 | or_ln50_2_fu_548_p2);

assign or_ln50_4_fu_516_p2 = (or_ln50_fu_510_p2 | icmp_ln48_fu_350_p2);

assign or_ln50_fu_510_p2 = (select_ln46_3_fu_425_p3 | and_ln48_1_fu_496_p2);

assign or_ln54_fu_572_p2 = (or_ln50_1_fu_530_p2 | and_ln50_fu_560_p2);

assign or_ln56_1_fu_626_p2 = (or_ln56_fu_620_p2 | or_ln48_fu_446_p2);

assign or_ln56_fu_620_p2 = (and_ln50_fu_560_p2 | and_ln48_1_fu_496_p2);

assign p_mid128_fu_774_p2 = (tmp2_mid126_fu_769_p2 + x0_2_fu_759_p2);

assign p_mid1_fu_796_p2 = (tmp2_mid1_fu_791_p2 + select_ln50_1_fu_780_p3);

assign select_ln46_1_fu_374_p3 = ((icmp_ln48_fu_350_p2[0:0] == 1'b1) ? mul_ln48_1_fu_369_p2 : mul_ln48_fu_288_p2);

assign select_ln46_2_fu_382_p3 = ((icmp_ln48_fu_350_p2[0:0] == 1'b1) ? 32'd0 : sub_ln50_fu_299_p2);

assign select_ln46_3_fu_425_p3 = ((icmp_ln48_fu_350_p2[0:0] == 1'b1) ? icmp_ln50 : icmp_ln50_1_fu_420_p2);

assign select_ln46_4_fu_432_p2 = f_out_fu_144;

assign select_ln46_4_fu_432_p3 = ((icmp_ln48_fu_350_p2[0:0] == 1'b1) ? f_out_2_fu_321_p2 : select_ln46_4_fu_432_p2);

assign select_ln46_5_fu_808_p3 = ((icmp_ln48_reg_1009[0:0] == 1'b1) ? tmp2_mid1125_fu_738_p2 : empty_53_fu_802_p2);

assign select_ln46_fu_355_p3 = ((icmp_ln48_fu_350_p2[0:0] == 1'b1) ? 32'd0 : indvar_fu_136);

assign select_ln48_1_fu_470_p3 = ((select_ln46_3_fu_425_p3[0:0] == 1'b1) ? sub_ln50_1_fu_464_p2 : select_ln46_2_fu_382_p3);

assign select_ln48_2_fu_502_p3 = ((select_ln46_3_fu_425_p3[0:0] == 1'b1) ? add_ln48_fu_440_p2 : select_ln46_fu_355_p3);

assign select_ln48_3_fu_815_p3 = ((select_ln46_3_reg_1019[0:0] == 1'b1) ? tmp2_mid169_fu_754_p2 : select_ln46_5_fu_808_p3);

assign select_ln48_4_fu_674_p3 = ((icmp_ln48_fu_350_p2[0:0] == 1'b1) ? 70'd1 : add_ln48_1_fu_668_p2);

assign select_ln48_fu_743_p3 = ((or_ln48_reg_1024[0:0] == 1'b1) ? 32'd0 : x0_fu_128);

assign select_ln50_1_fu_780_p3 = ((and_ln48_1_reg_1034[0:0] == 1'b1) ? x0_2_fu_759_p2 : select_ln48_fu_743_p3);

assign select_ln50_2_fu_822_p3 = ((and_ln48_1_reg_1034[0:0] == 1'b1) ? p_mid128_fu_774_p2 : select_ln48_3_fu_815_p3);

assign select_ln50_3_fu_660_p3 = ((or_ln48_fu_446_p2[0:0] == 1'b1) ? 38'd1 : add_ln50_1_fu_654_p2);

assign select_ln50_fu_522_p3 = ((or_ln50_4_fu_516_p2[0:0] == 1'b1) ? 3'd0 : y_fu_120);

assign select_ln54_1_fu_594_p3 = ((and_ln50_fu_560_p2[0:0] == 1'b1) ? add_ln54_fu_566_p2 : select_ln50_fu_522_p3);

assign select_ln54_2_fu_646_p3 = ((or_ln50_4_fu_516_p2[0:0] == 1'b1) ? 6'd1 : add_ln54_2_fu_640_p2);

assign select_ln54_fu_829_p3 = ((and_ln50_reg_1045[0:0] == 1'b1) ? p_mid1_fu_796_p2 : select_ln50_2_fu_822_p3);

assign select_ln56_fu_632_p3 = ((or_ln56_1_fu_626_p2[0:0] == 1'b1) ? 3'd1 : add_ln56_fu_614_p2);

assign sext_ln54_fu_868_p1 = $signed(sext_ln56_mid2_v_reg_1059);

assign sext_ln56_mid2_v_v_v_v_v_fu_836_p3 = {{select_ln54_fu_829_p3}, {2'd0}};

assign shl_ln50_1_fu_458_p2 = add_ln48_fu_440_p2 << 32'd3;

assign shl_ln50_fu_293_p2 = indvar_fu_136 << 32'd3;

assign sub_ln50_1_fu_464_p2 = (shl_ln50_1_fu_458_p2 - add_ln48_fu_440_p2);

assign sub_ln50_fu_299_p2 = (shl_ln50_fu_293_p2 - indvar_fu_136);

assign tmp1_fu_309_p2 = (mul_ln48_fu_288_p2 + y_cast_fu_305_p1);

assign tmp1_mid1_fu_582_p2 = (select_ln46_1_fu_374_p3 + y_cast_mid1_fu_578_p1);

assign tmp2_fu_726_p2 = (tmp5_fu_722_p2 + base_addr);

assign tmp2_mid1125_fu_738_p2 = (tmp5_mid1123_fu_734_p2 + base_addr);

assign tmp2_mid126_fu_769_p2 = (tmp5_mid124_fu_765_p2 + base_addr);

assign tmp2_mid169_fu_754_p2 = (tmp5_mid167_fu_750_p2 + base_addr);

assign tmp2_mid1_fu_791_p2 = (tmp5_mid1_fu_787_p2 + base_addr);

assign tmp4_fu_315_p2 = (tmp1_fu_309_p2 + sub_ln50_fu_299_p2);

assign tmp4_mid122_fu_536_p2 = (select_ln46_1_fu_374_p3 + select_ln48_1_fu_470_p3);

assign tmp4_mid165_fu_478_p2 = (select_ln46_1_fu_374_p3 + sub_ln50_1_fu_464_p2);

assign tmp4_mid1_fu_588_p2 = (tmp1_mid1_fu_582_p2 + select_ln48_1_fu_470_p3);

assign x0_2_fu_759_p2 = (select_ln48_fu_743_p3 + 32'd7);

assign xor_ln46_fu_390_p2 = (icmp_ln48_fu_350_p2 ^ 1'd1);

assign xor_ln48_fu_484_p2 = (select_ln46_3_fu_425_p3 ^ 1'd1);

assign xor_ln50_fu_542_p2 = (icmp_ln54_fu_408_p2 ^ 1'd1);

assign y_cast_fu_305_p1 = y_fu_120;

assign y_cast_mid1_fu_578_p1 = add_ln54_fu_566_p2;

assign zext_ln54_fu_844_p1 = sext_ln56_mid2_v_v_v_v_v_fu_836_p3;

endmodule //conv_kernel_load_input_Pipeline_load_input_loop6
