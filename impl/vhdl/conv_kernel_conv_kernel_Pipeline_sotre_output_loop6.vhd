-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_kernel_conv_kernel_Pipeline_sotre_output_loop6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    skip_out_fifo_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    skip_out_fifo_empty_n : IN STD_LOGIC;
    skip_out_fifo_read : OUT STD_LOGIC;
    noy : IN STD_LOGIC_VECTOR (31 downto 0);
    nox : IN STD_LOGIC_VECTOR (31 downto 0);
    base_addr_out : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln271_3 : IN STD_LOGIC_VECTOR (102 downto 0);
    mul_ln271_2 : IN STD_LOGIC_VECTOR (70 downto 0);
    mul_ln271_1 : IN STD_LOGIC_VECTOR (38 downto 0);
    icmp_ln275 : IN STD_LOGIC_VECTOR (0 downto 0);
    act_mem : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of conv_kernel_conv_kernel_Pipeline_sotre_output_loop6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv70_0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv102_0 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv103_0 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv103_1 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv70_1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv102_1 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal or_ln279_reg_1117 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln279_reg_1117_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal icmp_ln281_1_reg_1126 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_1_reg_1126_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln271_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_W : STD_LOGIC;
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal skip_out_fifo_blk_n : STD_LOGIC;
    signal first_iter_0_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mul_ln271_1_cast_fu_244_p1 : STD_LOGIC_VECTOR (69 downto 0);
    signal mul_ln271_1_cast_reg_1055 : STD_LOGIC_VECTOR (69 downto 0);
    signal mul_ln271_2_cast_fu_248_p1 : STD_LOGIC_VECTOR (101 downto 0);
    signal mul_ln271_2_cast_reg_1060 : STD_LOGIC_VECTOR (101 downto 0);
    signal tmp7_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln271_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln273_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln273_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln273_1_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln273_1_reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln271_3_fu_446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_3_reg_1084 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln273_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln273_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_mid1449_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_mid1449_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln273_1_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln273_1_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_mid1401_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_mid1401_reg_1107 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln275_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln275_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln279_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_mid1_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_mid1_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln281_1_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_1_reg_1126_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_1_reg_1126_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_1_reg_1126_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_1_reg_1126_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_1_reg_1126_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_1_reg_1126_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln281_mid2_v_reg_1130 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_first_iter_0_phi_fu_236_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal sext_ln279_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal x_fu_122 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln281_fu_644_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_fu_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln279_1_fu_615_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten386_fu_130 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln279_2_fu_673_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar136_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln275_2_fu_851_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten425_fu_138 : STD_LOGIC_VECTOR (69 downto 0);
    signal select_ln275_4_fu_687_p3 : STD_LOGIC_VECTOR (69 downto 0);
    signal indvar_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln273_3_fu_523_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten477_fu_146 : STD_LOGIC_VECTOR (101 downto 0);
    signal select_ln273_5_fu_701_p3 : STD_LOGIC_VECTOR (101 downto 0);
    signal f_out_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln271_4_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten544_fu_154 : STD_LOGIC_VECTOR (102 downto 0);
    signal add_ln271_fu_353_p2 : STD_LOGIC_VECTOR (102 downto 0);
    signal shl_ln275_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln273_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_8_cast_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln275_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_out_5_fu_342_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_out_5_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln281_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln271_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln279_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln275_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_4_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln271_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln271_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln273_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln275_1_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln275_1_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln271_2_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln271_1_fu_395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln271_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln273_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln271_1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln275_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln275_4_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln273_1_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln273_1_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln275_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln275_2_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln273_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln275_3_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln275_fu_543_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln275_1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln279_fu_587_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_8_cast_mid1_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_mid1_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln281_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_1_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln281_fu_626_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln279_2_fu_667_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln275_1_fu_681_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal add_ln273_1_fu_695_p2 : STD_LOGIC_VECTOR (101 downto 0);
    signal shl_ln279_fu_752_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln279_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_mid1512_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_mid1451_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln273_fu_788_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln275_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln279_1_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln279_1_fu_823_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln273_2_fu_795_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_mid1403_fu_836_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_mid1405_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_mid1_fu_858_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_mid1_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln275_1_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_mid1514_fu_783_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_773_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_mid1453_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln271_5_fu_873_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid1407_fu_845_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln273_4_fu_880_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid1380_fu_867_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln275_3_fu_887_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln279_fu_894_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln281_mid2_v_v_v_v_v_fu_901_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln279_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln279_1_fu_913_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_kernel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U329 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => f_out_fu_150,
        din1 => noy,
        dout => mul_ln273_fu_309_p2);

    mul_32s_32s_32_1_1_U330 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => f_out_5_fu_342_p2,
        din1 => noy,
        dout => mul_ln273_1_fu_390_p2);

    mul_32s_32s_32_1_1_U331 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp7_reg_1065,
        din1 => nox,
        dout => tmp8_fu_764_p2);

    mul_32s_32s_32_1_1_U332 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln273_1_reg_1079,
        din1 => nox,
        dout => tmp8_mid1512_fu_779_p2);

    mul_32s_32s_32_1_1_U333 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp7_mid1449_reg_1095,
        din1 => nox,
        dout => tmp8_mid1451_fu_802_p2);

    mul_32s_32s_32_1_1_U334 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp7_mid1401_reg_1107,
        din1 => nox,
        dout => tmp8_mid1403_fu_836_p2);

    mul_32s_32s_32_1_1_U335 : component conv_kernel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp7_mid1_reg_1121,
        din1 => nox,
        dout => tmp8_mid1_fu_858_p2);

    flow_control_loop_pipe_sequential_init_U : component conv_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    f_out_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    f_out_fu_150 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0))) then 
                    f_out_fu_150 <= select_ln271_4_fu_453_p3;
                end if;
            end if; 
        end if;
    end process;

    first_iter_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln271_reg_1070 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_0_reg_232 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_232 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar136_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar136_fu_134 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln271_reg_1070 = ap_const_lv1_0))) then 
                    indvar136_fu_134 <= select_ln275_2_fu_851_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten386_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten386_fu_130 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0))) then 
                    indvar_flatten386_fu_130 <= select_ln279_2_fu_673_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten425_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten425_fu_138 <= ap_const_lv70_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0))) then 
                    indvar_flatten425_fu_138 <= select_ln275_4_fu_687_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten477_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten477_fu_146 <= ap_const_lv102_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0))) then 
                    indvar_flatten477_fu_146 <= select_ln273_5_fu_701_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten544_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten544_fu_154 <= ap_const_lv103_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0))) then 
                    indvar_flatten544_fu_154 <= add_ln271_fu_353_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_fu_142 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0))) then 
                    indvar_fu_142 <= select_ln273_3_fu_523_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_122 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0))) then 
                    x_fu_122 <= select_ln281_fu_644_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_126 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0))) then 
                    y_fu_126 <= select_ln279_1_fu_615_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln271_fu_348_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln273_1_reg_1100 <= and_ln273_1_fu_517_p2;
                and_ln275_reg_1112 <= and_ln275_fu_581_p2;
                icmp_ln273_reg_1074 <= icmp_ln273_fu_371_p2;
                icmp_ln281_1_reg_1126 <= icmp_ln281_1_fu_652_p2;
                mul_ln273_1_reg_1079 <= mul_ln273_1_fu_390_p2;
                or_ln273_reg_1089 <= or_ln273_fu_467_p2;
                or_ln279_reg_1117 <= or_ln279_fu_593_p2;
                select_ln271_3_reg_1084 <= select_ln271_3_fu_446_p3;
                tmp7_mid1401_reg_1107 <= tmp7_mid1401_fu_557_p2;
                tmp7_mid1449_reg_1095 <= tmp7_mid1449_fu_499_p2;
                tmp7_mid1_reg_1121 <= tmp7_mid1_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln271_reg_1070 <= icmp_ln271_fu_348_p2;
                    mul_ln271_1_cast_reg_1055(38 downto 0) <= mul_ln271_1_cast_fu_244_p1(38 downto 0);
                    mul_ln271_2_cast_reg_1060(70 downto 0) <= mul_ln271_2_cast_fu_248_p1(70 downto 0);
                tmp7_reg_1065 <= tmp7_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln281_1_reg_1126_pp0_iter2_reg <= icmp_ln281_1_reg_1126;
                icmp_ln281_1_reg_1126_pp0_iter3_reg <= icmp_ln281_1_reg_1126_pp0_iter2_reg;
                icmp_ln281_1_reg_1126_pp0_iter4_reg <= icmp_ln281_1_reg_1126_pp0_iter3_reg;
                icmp_ln281_1_reg_1126_pp0_iter5_reg <= icmp_ln281_1_reg_1126_pp0_iter4_reg;
                icmp_ln281_1_reg_1126_pp0_iter6_reg <= icmp_ln281_1_reg_1126_pp0_iter5_reg;
                icmp_ln281_1_reg_1126_pp0_iter7_reg <= icmp_ln281_1_reg_1126_pp0_iter6_reg;
                icmp_ln281_1_reg_1126_pp0_iter8_reg <= icmp_ln281_1_reg_1126_pp0_iter7_reg;
                or_ln279_reg_1117_pp0_iter2_reg <= or_ln279_reg_1117;
                tmp_reg_1135 <= skip_out_fifo_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln271_reg_1070 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln281_mid2_v_reg_1130 <= add_ln279_1_fu_913_p2(63 downto 2);
            end if;
        end if;
    end process;
    mul_ln271_1_cast_reg_1055(69 downto 39) <= "0000000000000000000000000000000";
    mul_ln271_2_cast_reg_1060(101 downto 71) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln271_fu_353_p2 <= std_logic_vector(unsigned(indvar_flatten544_fu_154) + unsigned(ap_const_lv103_1));
    add_ln273_1_fu_695_p2 <= std_logic_vector(unsigned(indvar_flatten477_fu_146) + unsigned(ap_const_lv102_1));
    add_ln273_fu_461_p2 <= std_logic_vector(unsigned(select_ln271_fu_376_p3) + unsigned(ap_const_lv32_1));
    add_ln275_1_fu_681_p2 <= std_logic_vector(unsigned(indvar_flatten425_fu_138) + unsigned(ap_const_lv70_1));
    add_ln275_fu_811_p2 <= std_logic_vector(unsigned(select_ln273_fu_788_p3) + unsigned(ap_const_lv32_1));
    add_ln279_1_fu_913_p2 <= std_logic_vector(unsigned(zext_ln279_fu_909_p1) + unsigned(act_mem));
    add_ln279_2_fu_667_p2 <= std_logic_vector(unsigned(indvar_flatten386_fu_130) + unsigned(ap_const_lv6_1));
    add_ln279_fu_587_p2 <= std_logic_vector(unsigned(select_ln275_fu_543_p3) + unsigned(ap_const_lv3_1));
    add_ln281_fu_626_p2 <= std_logic_vector(unsigned(x_fu_122) + unsigned(ap_const_lv3_1));
    and_ln271_1_fu_435_p2 <= (xor_ln271_fu_411_p2 and icmp_ln279_fu_429_p2);
    and_ln271_fu_423_p2 <= (xor_ln271_fu_411_p2 and icmp_ln281_fu_417_p2);
    and_ln273_1_fu_517_p2 <= (xor_ln273_fu_505_p2 and and_ln271_1_fu_435_p2);
    and_ln273_fu_511_p2 <= (xor_ln273_fu_505_p2 and and_ln271_fu_423_p2);
    and_ln275_fu_581_p2 <= (or_ln275_3_fu_575_p2 and and_ln273_fu_511_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter9, m_axi_gmem0_BVALID, skip_out_fifo_empty_n, icmp_ln281_1_reg_1126_pp0_iter8_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln281_1_reg_1126_pp0_iter8_reg = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (skip_out_fifo_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter9, m_axi_gmem0_WREADY, m_axi_gmem0_BVALID, skip_out_fifo_empty_n, ap_block_state4_io, icmp_ln281_1_reg_1126_pp0_iter8_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln281_1_reg_1126_pp0_iter8_reg = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((m_axi_gmem0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (skip_out_fifo_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter9, m_axi_gmem0_WREADY, m_axi_gmem0_BVALID, skip_out_fifo_empty_n, ap_block_state4_io, icmp_ln281_1_reg_1126_pp0_iter8_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln281_1_reg_1126_pp0_iter8_reg = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((m_axi_gmem0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (skip_out_fifo_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_gmem0_BVALID, icmp_ln281_1_reg_1126_pp0_iter8_reg)
    begin
                ap_block_state10_pp0_stage0_iter9 <= ((icmp_ln281_1_reg_1126_pp0_iter8_reg = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem0_AWREADY, or_ln279_reg_1117_pp0_iter2_reg)
    begin
                ap_block_state4_io <= ((m_axi_gmem0_AWREADY = ap_const_logic_0) and (or_ln279_reg_1117_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(skip_out_fifo_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (skip_out_fifo_empty_n = ap_const_logic_0);
    end process;

        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln271_fu_348_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln271_fu_348_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln271_reg_1070)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln271_reg_1070 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_0_phi_fu_236_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, first_iter_0_reg_232, icmp_ln271_reg_1070)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln271_reg_1070 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_0_phi_fu_236_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_236_p4 <= first_iter_0_reg_232;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_773_p2 <= std_logic_vector(unsigned(tmp14_fu_768_p2) + unsigned(sub_ln279_fu_758_p2));
    f_out_5_fu_342_p0 <= f_out_fu_150;
    f_out_5_fu_342_p2 <= std_logic_vector(signed(f_out_5_fu_342_p0) + signed(ap_const_lv32_1));

    gmem0_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem0_AWREADY, or_ln279_reg_1117_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln279_reg_1117_pp0_iter2_reg = ap_const_lv1_1))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem0_BVALID, icmp_ln281_1_reg_1126_pp0_iter8_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln281_1_reg_1126_pp0_iter8_reg = ap_const_lv1_1))) then 
            gmem0_blk_n_B <= m_axi_gmem0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_gmem0_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem0_blk_n_W <= m_axi_gmem0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln271_fu_348_p2 <= "1" when (indvar_flatten544_fu_154 = mul_ln271_3) else "0";
    icmp_ln273_fu_371_p2 <= "1" when (indvar_flatten477_fu_146 = mul_ln271_2_cast_reg_1060) else "0";
    icmp_ln275_1_fu_441_p2 <= "1" when (indvar_flatten425_fu_138 = mul_ln271_1_cast_reg_1055) else "0";
    icmp_ln279_fu_429_p2 <= "1" when (indvar_flatten386_fu_130 = ap_const_lv6_31) else "0";
    icmp_ln281_1_fu_652_p2 <= "1" when (select_ln281_fu_644_p3 = ap_const_lv3_7) else "0";
    icmp_ln281_fu_417_p2 <= "1" when (x_fu_122 = ap_const_lv3_7) else "0";
    m_axi_gmem0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_AWADDR <= sext_ln279_fu_933_p1;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_7;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem0_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter3, or_ln279_reg_1117_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln279_reg_1117_pp0_iter2_reg = ap_const_lv1_1))) then 
            m_axi_gmem0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_BREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln281_1_reg_1126_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln281_1_reg_1126_pp0_iter8_reg = ap_const_lv1_1))) then 
            m_axi_gmem0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_RREADY <= ap_const_logic_0;
    m_axi_gmem0_WDATA <= tmp_reg_1135;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_F;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln271_1_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln271_1),70));
    mul_ln271_2_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln271_2),102));
    or_ln271_fu_384_p2 <= (icmp_ln273_fu_371_p2 or ap_phi_mux_first_iter_0_phi_fu_236_p4);
    or_ln273_1_fu_473_p2 <= (select_ln271_3_fu_446_p3 or or_ln271_fu_384_p2);
    or_ln273_fu_467_p2 <= (select_ln271_3_fu_446_p3 or icmp_ln273_fu_371_p2);
    or_ln275_1_fu_551_p2 <= (or_ln273_1_fu_473_p2 or and_ln273_1_fu_517_p2);
    or_ln275_2_fu_569_p2 <= (xor_ln275_fu_563_p2 or icmp_ln273_fu_371_p2);
    or_ln275_3_fu_575_p2 <= (select_ln271_3_fu_446_p3 or or_ln275_2_fu_569_p2);
    or_ln275_4_fu_537_p2 <= (or_ln275_fu_531_p2 or icmp_ln273_fu_371_p2);
    or_ln275_fu_531_p2 <= (select_ln271_3_fu_446_p3 or and_ln273_1_fu_517_p2);
    or_ln279_fu_593_p2 <= (or_ln275_1_fu_551_p2 or and_ln275_fu_581_p2);
    or_ln281_1_fu_638_p2 <= (or_ln281_fu_632_p2 or or_ln273_fu_467_p2);
    or_ln281_fu_632_p2 <= (and_ln275_fu_581_p2 or and_ln273_1_fu_517_p2);
    p_mid1380_fu_867_p2 <= std_logic_vector(unsigned(tmp14_mid1_fu_862_p2) + unsigned(select_ln275_1_fu_829_p3));
    p_mid1407_fu_845_p2 <= std_logic_vector(unsigned(tmp14_mid1405_fu_840_p2) + unsigned(sub_ln279_1_fu_823_p2));
    select_ln271_1_fu_395_p3 <= 
        mul_ln273_1_fu_390_p2 when (icmp_ln273_fu_371_p2(0) = '1') else 
        mul_ln273_fu_309_p2;
    select_ln271_2_fu_403_p3 <= 
        ap_const_lv32_0 when (icmp_ln273_fu_371_p2(0) = '1') else 
        sub_ln275_fu_320_p2;
    select_ln271_3_fu_446_p3 <= 
        icmp_ln275 when (icmp_ln273_fu_371_p2(0) = '1') else 
        icmp_ln275_1_fu_441_p2;
    select_ln271_4_fu_453_p2 <= f_out_fu_150;
    select_ln271_4_fu_453_p3 <= 
        f_out_5_fu_342_p2 when (icmp_ln273_fu_371_p2(0) = '1') else 
        select_ln271_4_fu_453_p2;
    select_ln271_5_fu_873_p3 <= 
        tmp14_mid1514_fu_783_p2 when (icmp_ln273_reg_1074(0) = '1') else 
        empty_fu_773_p2;
    select_ln271_fu_376_p3 <= 
        ap_const_lv32_0 when (icmp_ln273_fu_371_p2(0) = '1') else 
        indvar_fu_142;
    select_ln273_1_fu_491_p3 <= 
        sub_ln275_1_fu_485_p2 when (select_ln271_3_fu_446_p3(0) = '1') else 
        select_ln271_2_fu_403_p3;
    select_ln273_2_fu_795_p3 <= 
        ap_const_lv32_0 when (or_ln273_reg_1089(0) = '1') else 
        sub_ln279_fu_758_p2;
    select_ln273_3_fu_523_p3 <= 
        add_ln273_fu_461_p2 when (select_ln271_3_fu_446_p3(0) = '1') else 
        select_ln271_fu_376_p3;
    select_ln273_4_fu_880_p3 <= 
        tmp14_mid1453_fu_806_p2 when (select_ln271_3_reg_1084(0) = '1') else 
        select_ln271_5_fu_873_p3;
    select_ln273_5_fu_701_p3 <= 
        ap_const_lv102_1 when (icmp_ln273_fu_371_p2(0) = '1') else 
        add_ln273_1_fu_695_p2;
    select_ln273_fu_788_p3 <= 
        ap_const_lv32_0 when (or_ln273_reg_1089(0) = '1') else 
        indvar136_fu_134;
    select_ln275_1_fu_829_p3 <= 
        sub_ln279_1_fu_823_p2 when (and_ln273_1_reg_1100(0) = '1') else 
        select_ln273_2_fu_795_p3;
    select_ln275_2_fu_851_p3 <= 
        add_ln275_fu_811_p2 when (and_ln273_1_reg_1100(0) = '1') else 
        select_ln273_fu_788_p3;
    select_ln275_3_fu_887_p3 <= 
        p_mid1407_fu_845_p2 when (and_ln273_1_reg_1100(0) = '1') else 
        select_ln273_4_fu_880_p3;
    select_ln275_4_fu_687_p3 <= 
        ap_const_lv70_1 when (or_ln273_fu_467_p2(0) = '1') else 
        add_ln275_1_fu_681_p2;
    select_ln275_fu_543_p3 <= 
        ap_const_lv3_0 when (or_ln275_4_fu_537_p2(0) = '1') else 
        y_fu_126;
    select_ln279_1_fu_615_p3 <= 
        add_ln279_fu_587_p2 when (and_ln275_fu_581_p2(0) = '1') else 
        select_ln275_fu_543_p3;
    select_ln279_2_fu_673_p3 <= 
        ap_const_lv6_1 when (or_ln275_4_fu_537_p2(0) = '1') else 
        add_ln279_2_fu_667_p2;
    select_ln279_fu_894_p3 <= 
        p_mid1380_fu_867_p2 when (and_ln275_reg_1112(0) = '1') else 
        select_ln275_3_fu_887_p3;
    select_ln281_fu_644_p3 <= 
        ap_const_lv3_1 when (or_ln281_1_fu_638_p2(0) = '1') else 
        add_ln281_fu_626_p2;
        sext_ln279_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln281_mid2_v_reg_1130),64));

    sext_ln281_mid2_v_v_v_v_v_fu_901_p3 <= (select_ln279_fu_894_p3 & ap_const_lv2_0);
    shl_ln275_1_fu_479_p2 <= std_logic_vector(shift_left(unsigned(add_ln273_fu_461_p2),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln275_fu_314_p2 <= std_logic_vector(shift_left(unsigned(indvar_fu_142),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln279_1_fu_817_p2 <= std_logic_vector(shift_left(unsigned(add_ln275_fu_811_p2),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln279_fu_752_p2 <= std_logic_vector(shift_left(unsigned(indvar136_fu_134),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    skip_out_fifo_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, skip_out_fifo_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            skip_out_fifo_blk_n <= skip_out_fifo_empty_n;
        else 
            skip_out_fifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    skip_out_fifo_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            skip_out_fifo_read <= ap_const_logic_1;
        else 
            skip_out_fifo_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln275_1_fu_485_p2 <= std_logic_vector(unsigned(shl_ln275_1_fu_479_p2) - unsigned(add_ln273_fu_461_p2));
    sub_ln275_fu_320_p2 <= std_logic_vector(unsigned(shl_ln275_fu_314_p2) - unsigned(indvar_fu_142));
    sub_ln279_1_fu_823_p2 <= std_logic_vector(unsigned(shl_ln279_1_fu_817_p2) - unsigned(add_ln275_fu_811_p2));
    sub_ln279_fu_758_p2 <= std_logic_vector(unsigned(shl_ln279_fu_752_p2) - unsigned(indvar136_fu_134));
    tmp13_fu_330_p2 <= std_logic_vector(unsigned(mul_ln273_fu_309_p2) + unsigned(y_8_cast_fu_326_p1));
    tmp13_mid1_fu_603_p2 <= std_logic_vector(unsigned(select_ln271_1_fu_395_p3) + unsigned(y_8_cast_mid1_fu_599_p1));
    tmp14_fu_768_p2 <= std_logic_vector(unsigned(base_addr_out) + unsigned(tmp8_fu_764_p2));
    tmp14_mid1405_fu_840_p2 <= std_logic_vector(unsigned(base_addr_out) + unsigned(tmp8_mid1403_fu_836_p2));
    tmp14_mid1453_fu_806_p2 <= std_logic_vector(unsigned(base_addr_out) + unsigned(tmp8_mid1451_fu_802_p2));
    tmp14_mid1514_fu_783_p2 <= std_logic_vector(unsigned(base_addr_out) + unsigned(tmp8_mid1512_fu_779_p2));
    tmp14_mid1_fu_862_p2 <= std_logic_vector(unsigned(base_addr_out) + unsigned(tmp8_mid1_fu_858_p2));
    tmp7_fu_336_p2 <= std_logic_vector(unsigned(tmp13_fu_330_p2) + unsigned(sub_ln275_fu_320_p2));
    tmp7_mid1401_fu_557_p2 <= std_logic_vector(unsigned(select_ln271_1_fu_395_p3) + unsigned(select_ln273_1_fu_491_p3));
    tmp7_mid1449_fu_499_p2 <= std_logic_vector(unsigned(select_ln271_1_fu_395_p3) + unsigned(sub_ln275_1_fu_485_p2));
    tmp7_mid1_fu_609_p2 <= std_logic_vector(unsigned(tmp13_mid1_fu_603_p2) + unsigned(select_ln273_1_fu_491_p3));
    xor_ln271_fu_411_p2 <= (icmp_ln273_fu_371_p2 xor ap_const_lv1_1);
    xor_ln273_fu_505_p2 <= (select_ln271_3_fu_446_p3 xor ap_const_lv1_1);
    xor_ln275_fu_563_p2 <= (icmp_ln279_fu_429_p2 xor ap_const_lv1_1);
    y_8_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_126),32));
    y_8_cast_mid1_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln279_fu_587_p2),32));
    zext_ln279_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln281_mid2_v_v_v_v_v_fu_901_p3),64));
end behav;
