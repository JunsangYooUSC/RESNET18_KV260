-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_kernel_PE_Pipeline_pe_loop20_pe_loop21 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pe_out_fifo7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pe_out_fifo7_full_n : IN STD_LOGIC;
    pe_out_fifo7_write : OUT STD_LOGIC;
    mac_vals_98 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_99 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_100 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_101 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_102 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_103 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_104 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_105 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_106 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_107 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_108 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_109 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_110 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_111 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_112 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_113 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_114 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_115 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_116 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_117 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_118 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_119 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_120 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_121 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_122 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_123 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_124 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_125 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_126 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_127 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_128 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_129 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_130 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_131 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_132 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_133 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_134 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_135 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_136 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_137 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_138 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_139 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_140 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_141 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_142 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_143 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_144 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_145 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vals_146 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_kernel_PE_Pipeline_pe_loop20_pe_loop21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln243_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal pe_out_fifo7_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_s_fu_661_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_fu_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln245_fu_681_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (2 downto 0);
    signal y_8_fu_148 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln243_1_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_y_8_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten357_fu_152 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln243_fu_481_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten357_load : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln245_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln243_1_fu_507_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln243_fu_499_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_521_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_541_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_561_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_581_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_601_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_621_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_641_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_661_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_kernel_mux_73_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_73_32_1_1_U205 : component conv_kernel_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mac_vals_98,
        din1 => mac_vals_99,
        din2 => mac_vals_100,
        din3 => mac_vals_101,
        din4 => mac_vals_102,
        din5 => mac_vals_103,
        din6 => mac_vals_104,
        din7 => select_ln243_fu_499_p3,
        dout => tmp_3_fu_521_p9);

    mux_73_32_1_1_U206 : component conv_kernel_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mac_vals_105,
        din1 => mac_vals_106,
        din2 => mac_vals_107,
        din3 => mac_vals_108,
        din4 => mac_vals_109,
        din5 => mac_vals_110,
        din6 => mac_vals_111,
        din7 => select_ln243_fu_499_p3,
        dout => tmp_4_fu_541_p9);

    mux_73_32_1_1_U207 : component conv_kernel_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mac_vals_112,
        din1 => mac_vals_113,
        din2 => mac_vals_114,
        din3 => mac_vals_115,
        din4 => mac_vals_116,
        din5 => mac_vals_117,
        din6 => mac_vals_118,
        din7 => select_ln243_fu_499_p3,
        dout => tmp_5_fu_561_p9);

    mux_73_32_1_1_U208 : component conv_kernel_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mac_vals_119,
        din1 => mac_vals_120,
        din2 => mac_vals_121,
        din3 => mac_vals_122,
        din4 => mac_vals_123,
        din5 => mac_vals_124,
        din6 => mac_vals_125,
        din7 => select_ln243_fu_499_p3,
        dout => tmp_6_fu_581_p9);

    mux_73_32_1_1_U209 : component conv_kernel_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mac_vals_126,
        din1 => mac_vals_127,
        din2 => mac_vals_128,
        din3 => mac_vals_129,
        din4 => mac_vals_130,
        din5 => mac_vals_131,
        din6 => mac_vals_132,
        din7 => select_ln243_fu_499_p3,
        dout => tmp_7_fu_601_p9);

    mux_73_32_1_1_U210 : component conv_kernel_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mac_vals_133,
        din1 => mac_vals_134,
        din2 => mac_vals_135,
        din3 => mac_vals_136,
        din4 => mac_vals_137,
        din5 => mac_vals_138,
        din6 => mac_vals_139,
        din7 => select_ln243_fu_499_p3,
        dout => tmp_8_fu_621_p9);

    mux_73_32_1_1_U211 : component conv_kernel_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mac_vals_140,
        din1 => mac_vals_141,
        din2 => mac_vals_142,
        din3 => mac_vals_143,
        din4 => mac_vals_144,
        din5 => mac_vals_145,
        din6 => mac_vals_146,
        din7 => select_ln243_fu_499_p3,
        dout => tmp_9_fu_641_p9);

    mux_73_32_1_1_U212 : component conv_kernel_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_3_fu_521_p9,
        din1 => tmp_4_fu_541_p9,
        din2 => tmp_5_fu_561_p9,
        din3 => tmp_6_fu_581_p9,
        din4 => tmp_7_fu_601_p9,
        din5 => tmp_8_fu_621_p9,
        din6 => tmp_9_fu_641_p9,
        din7 => tmp_s_fu_661_p8,
        dout => tmp_s_fu_661_p9);

    flow_control_loop_pipe_sequential_init_U : component conv_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten357_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln243_fu_475_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten357_fu_152 <= add_ln243_fu_481_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten357_fu_152 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln243_fu_475_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_144 <= add_ln245_fu_681_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_144 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    y_8_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln243_fu_475_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_8_fu_148 <= select_ln243_1_fu_513_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_8_fu_148 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln243_fu_475_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_s_reg_730 <= tmp_s_fu_661_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln243_1_fu_507_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_8_load) + unsigned(ap_const_lv3_1));
    add_ln243_fu_481_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten357_load) + unsigned(ap_const_lv6_1));
    add_ln245_fu_681_p2 <= std_logic_vector(unsigned(select_ln243_fu_499_p3) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, pe_out_fifo7_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((pe_out_fifo7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, pe_out_fifo7_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((pe_out_fifo7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, pe_out_fifo7_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((pe_out_fifo7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(pe_out_fifo7_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (pe_out_fifo7_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln243_fu_475_p2)
    begin
        if (((icmp_ln243_fu_475_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten357_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten357_fu_152)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten357_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten357_load <= indvar_flatten357_fu_152;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_144, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_x_load <= x_fu_144;
        end if; 
    end process;


    ap_sig_allocacmp_y_8_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, y_8_fu_148)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_y_8_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_y_8_load <= y_8_fu_148;
        end if; 
    end process;

    icmp_ln243_fu_475_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten357_load = ap_const_lv6_31) else "0";
    icmp_ln245_fu_493_p2 <= "1" when (ap_sig_allocacmp_x_load = ap_const_lv3_7) else "0";

    pe_out_fifo7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, pe_out_fifo7_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_out_fifo7_blk_n <= pe_out_fifo7_full_n;
        else 
            pe_out_fifo7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pe_out_fifo7_din <= tmp_s_reg_730;

    pe_out_fifo7_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_out_fifo7_write <= ap_const_logic_1;
        else 
            pe_out_fifo7_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln243_1_fu_513_p3 <= 
        add_ln243_1_fu_507_p2 when (icmp_ln245_fu_493_p2(0) = '1') else 
        ap_sig_allocacmp_y_8_load;
    select_ln243_fu_499_p3 <= 
        ap_const_lv3_0 when (icmp_ln245_fu_493_p2(0) = '1') else 
        ap_sig_allocacmp_x_load;
    tmp_s_fu_661_p8 <= 
        add_ln243_1_fu_507_p2 when (icmp_ln245_fu_493_p2(0) = '1') else 
        ap_sig_allocacmp_y_8_load;
end behav;
